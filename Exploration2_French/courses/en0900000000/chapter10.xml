<chapter type="" id="en0910000000">
<title><content-text>Link-State Routing Protocols</content-text></title>
<section type="ChapterIntroduction" id="en0910000000">
<title><content-text>Chapter Introduction</content-text></title>
<topic type="" id="en0910000100">
<title><content-text>Chapter Introduction</content-text></title>
<page type="OneColumn" id="en0910000101">
<content-media type="StaticGraphic" id="cm1602315033"><title><content-text></content-text></title><media ref="en0910000000/en0910000000/en0910000100/en0910000101/cm1602315033.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en0910000000/en0910000000/en0910000100/en0910000101/cm1602315033text.xml"/></content-media>
<content-text><p>In Chapter 3, "Introduction to Dynamic Routing Protocols," we illustrated the difference between link-state and distance vector routing with an analogy. The analogy stated that distance vector routing protocols are like using road signs to guide you on your way to a destination, only giving you information about distance and direction. However, link-state routing protocols are like using a map. With a map, you can see all of the potential routes and determine your own preferred path. </p> <p>Distance vector routing protocols are like road signs because routers must make preferred path decisions based on a distance or metric to a network. Just as travelers trust a road sign to accurately state the distance to the next town, a distance vector router trusts that another router is advertising the true distance to the destination network.</p> <p>Link-state routing protocols take a different approach. Link-state routing protocols are more like a road map because they create a topological map of the network and each router uses this map to determine the shortest path to each network. Just as you refer to a map to find the route to another town, link-state routers use a map to determine the preferred path to reach another destination. </p> <p>Routers running a link-state routing protocol send information about the state of its links to other routers in the routing domain. The state of those links refers to its directly connected networks and includes information about the type of network and any neighboring routers on those networks-hence the name link-state routing protocol.</p> <p>The ultimate objective is that every router receives all of the link-state information about all other routers in the routing area. With this link-state information, each router can create its own topological map of the network and independently calculate the shortest path to every network.</p> <p>This chapter introduces the concepts of link-state routing protocols. In Chapter 11, we will apply these concepts to OSPF.</p></content-text>
</page>
</topic>
</section>
<section type="" id="en0910010000">
<title><content-text>Link-State Routing</content-text></title>
<topic type="" id="en0910010100">
<title><content-text>Link-State Routing Protocols</content-text></title>
<page type="OneColumn" id="en0910010101">
<content-media type="StaticGraphic" id="cm3655797519"><title><content-text></content-text></title><media ref="en0910000000/en0910010000/en0910010100/en0910010101/cm3655797519.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en0910000000/en0910010000/en0910010100/en0910010101/cm3655797519text.xml"/></content-media>
<content-text><p>Link-state routing protocols are also known as<i> shortest path first </i>protocols and built around Edsger Dijkstra's <content-link target="cg5198283076" type="glossary">shortest path first (SPF)</content-link> algorithm. The SPF algorithm will be discussed in more detail in a later section.</p> <p>The IP link-state routing protocols are shown in the figure:</p> <ul><li> Open Shortest Path First (OSPF)</li> <li> Intermediate System-to-Intermediate System (IS-IS)</li></ul> <p>Link-state routing protocols have the reputation of being much more complex than their distance vector counterparts. However, the basic functionality and configuration of link-state routing protocols is not complex at all. Even the algorithm itself can be easily understood, as you will see in the next topic. Basic OSPF operations can be configured with a <span class="cmd"><b>router ospf </b><i>process-id</i></span> command and a network statement, similar to other routing protocols like RIP and EIGRP.</p> <p><b>Note:</b> OSPF is discussed in Chapter 11, and IS-IS is discussed in CCNP. There are also link-state routing protocols for non-IP networks. These include DEC's DNA Phase V and Novell's NetWare Link Services Protocol (NLSP), which are not part of CCNA or CCNP curriculum.</p></content-text>
</page>
</topic>
<topic type="" id="en0910010200">
<title><content-text>Introduction to the SPF Algorithm</content-text></title>
<page type="OneColumn" id="en0910010201">
<content-media type="StaticGraphic" id="cm4950097269"><title><content-text></content-text></title><media ref="en0910000000/en0910010000/en0910010200/en0910010201/cm4950097269.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en0910000000/en0910010000/en0910010200/en0910010201/cm4950097269text.xml"/></content-media>
<content-text><p>Dijkstra's algorithm is commonly referred to as the shortest path first (SPF) algorithm. This algorithm accumulates costs along each path, from source to destination. Although, Dijkstra's algorithm is known as the shortest path first algorithm, this is in fact the purpose of every routing algorithm.</p> <p>In the figure, each path is labeled with an arbitrary value for cost. The cost of the shortest path for R2 to send packets to the LAN attached to R3 is 27. Notice that this cost is not 27 for all routers to reach the LAN attached to R3. Each router determines its own cost to each destination in the topology. In other words, each router calculates the SPF algorithm and determines the cost from its own perspective. This will become more evident later in this chapter.</p></content-text>
</page>
<page type="OneColumn" id="en0910010202">
<content-media type="InteractiveGraphicHotspots" id="cm3011550797"><title><content-text></content-text></title><media ref="en0910000000/en0910010000/en0910010200/en0910010202/cm3011550797.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en0910000000/en0910010000/en0910010200/en0910010202/cm3011550797text.xml"/></content-media>
<content-text><p><b>Click R1 in the figure.</b></p> <p>For R1, the shortest path to each LAN - along with the cost - is shown in the table. The shortest path is not necessarily the path with the least number of hops. For example, look at the path to the R5 LAN. You might think that R1 would send directly to R4 instead of to R3. However, the cost to reach R4 directly (22) is higher than the cost to reach R4 through R3 (17).</p> <p><b>Continue to click R2 through R5 in the figure. </b></p> <p>Observe the shortest path for each router to reach each of the LANs, as shown in the tables.</p></content-text>
</page>
</topic>
<topic type="" id="en0910010300">
<title><content-text>Link-State Routing Process</content-text></title>
<page type="OneColumn" id="en0910010301">
<content-media type="StaticGraphic" id="cm8712239934"><title><content-text></content-text></title><media ref="en0910000000/en0910010000/en0910010300/en0910010301/cm8712239934.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en0910000000/en0910010000/en0910010300/en0910010301/cm8712239934text.xml"/></content-media>
<content-text><p>So exactly how does a link-state routing protocol work? All routers in our topology will complete the following generic link-state routing process to reach a state of convergence:</p> <p>1. <b>Each router learns about its own links, its own directly connected networks.</b> This is done by detecting that an interface is in the <b>up</b> state.</p> <p>2. <b>Each router is responsible for meeting its neighbors on directly connected networks. </b>Similar to EIGRP, link state routers do this by exchanging Hello packets with other link-state routers on directly connected networks.</p> <p>3. <b>Each router builds a <content-link target="cg1882735968" type="glossary">Link-State Packet (LSP)</content-link> containing the state of each directly connected link. </b>This is done by recording all the pertinent information about each neighbor, including neighbor ID, link type, and bandwidth.</p> <p>4. <b>Each router floods the LSP to all neighbors, who then store all LSPs received in a database. </b>Neighbors then flood the LSPs to their neighbors until all routers in the area have received the LSPs. Each router stores a copy of each LSP received from its neighbors in a local database.</p> <p>5. <b>Each router uses the database to construct a complete map of the topology and computes the best path to each destination network.</b> Like having a road map, the router now has a complete map of all destinations in the topology and the routes to reach them. The SPF algorithm is used to construct the map of the topology and to determine the best path to each network. </p> <p>We will discuss this process in more detail in the following topics.</p></content-text>
</page>
</topic>
<topic type="" id="en0910010400">
<title><content-text>Learning about Directly Connected Networks</content-text></title>
<page type="OneColumn" id="en0910010401">
<content-media type="InteractiveGraphicHotspots" id="cm4224138709"><title><content-text></content-text></title><media ref="en0910000000/en0910010000/en0910010400/en0910010401/cm4224138709.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en0910000000/en0910010000/en0910010400/en0910010401/cm4224138709text.xml"/></content-media>
<content-text><p><b>Click Link-State Routing Process in the figure.</b></p> <p>The topology now shows the network addresses for each link. <b>Each router learns about its own links, its own directly connected networks </b>in the same way as was discussed in Chapter 1, "Introduction to Routing and Packet Forwarding." When a router interface is configured with an IP address and subnet mask, the interface becomes part of that network. </p> <p><b>Click R1 in the figure.</b></p> <p>When you correctly configure and activate the interfaces, the router learns about its own directly connected networks. Regardless of the routing protocols used, these directly connected networks are now part of the routing table. For purposes of our discussion, we will focus on the link-state routing process from the perspective of R1.</p> <p> </p></content-text>
</page>
<page type="OneColumn" id="en0910010402">
<content-media type="StaticGraphic" id="cm8276321629"><title><content-text></content-text></title><media ref="en0910000000/en0910010000/en0910010400/en0910010402/cm8276321629.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en0910000000/en0910010000/en0910010400/en0910010402/cm8276321629text.xml"/></content-media>
<content-text><p><b>Link</b></p> <p>With link-state routing protocols, a <i>link </i>is an interface on a router. As with distance vector protocols and static routes, the interface must be properly configured with an IP address and subnet mask and the link must be in the <b>up</b> state before the link-state routing protocol can learn about a link. Also like distance vector protocols, the interface must be included in one of the <span class="cmd"><b>network </b></span>statements before it can participate in the link-state routing process. </p> <p>The figure shows R1 linked to four directly connected networks: </p> <ul><li> FastEthernet 0/0 interface on the 10.1.0.0/16 network</li> <li> Serial 0/0/0 network on the 10.2.0.0/16 network</li> <li> Serial 0/0/1 network on the 10.3.0.0/16 network</li> <li> Serial 0/0/2 network on the 10.4.0.0/16 network</li></ul> <p><b>Link-State</b></p> <p>Information about the state of those links is known as <i>link-states</i>. As you can see in the figure, this information includes:</p> <ul><li> The interface's IP address and subnet mask.</li> <li> The type of network, such as Ethernet (broadcast) or Serial point-to-point link.</li> <li> The cost of that link.</li> <li> Any neighbor routers on that link.</li></ul> <p><b>Note: </b>We will see that Cisco's implementation of OSPF specifies the cost of the link, the OSPF routing metric, as the bandwidth of the outgoing interface. But for the purposes of this chapter, we are using arbitrary cost values to simplify our demonstration. </p></content-text>
</page>
</topic>
<topic type="" id="en0910010500">
<title><content-text>Sending Hello Packets to Neighbors</content-text></title>
<page type="OneColumn" id="en0910010501">
<content-media type="StaticGraphic" id="cm9894935766"><title><content-text></content-text></title><media ref="en0910000000/en0910010000/en0910010500/en0910010501/cm9894935766.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en0910000000/en0910010000/en0910010500/en0910010501/cm9894935766text.xml"/></content-media>
<content-text><p>The second step in the link-state routing process is:</p> <p><b>Each router is responsible for meeting its neighbors on directly connected networks. </b></p> <p>Routers with link-state routing protocols use a Hello protocol to discover any neighbors on its links. A <i>neighbor</i> is any other router that is enabled with the same link-state routing protocol. </p></content-text>
</page>
<page type="OneColumn" id="en0910010502">
<content-media type="AnimationPartialScreen" id="cm1420081649"><title><content-text></content-text></title><media ref="en0910000000/en0910010000/en0910010500/en0910010502/cm1420081649.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en0910000000/en0910010000/en0910010500/en0910010502/cm1420081649text.xml"/></content-media>
<content-text><p><b>Click Play to view the animation.</b></p> <p>R1 sends Hello packets out its links (interfaces) to discover if there are any neighbors. R2, R3, and R4 reply to the Hello packet with their own Hello packets because these routers are configured with the same link-state routing protocol. There are no neighbors out the FastEthernet 0/0 interface. Because R1 does not receive a Hello on this interface, it will not continue with the link-state routing process steps for the FastEthernet 0/0 link.</p> <p>Similar to EIGRP's Hello packets, when two link-state routers learn that they are neighbors, they form an <i>adjacency</i>. These small Hello packets continue to be exchanged between two adjacent neighbors which serve as a "keepalive" function to monitor the state of the neighbor. If a router stops receiving Hello packets from a neighbor, that neighbor is considered unreachable and the adjacency is broken. In the figure, R1 forms an adjacency with all three routers. </p></content-text>
</page>
</topic>
<topic type="" id="en0910010600">
<title><content-text>Building the Link-State Packet</content-text></title>
<page type="OneColumn" id="en0910010601">
<content-media type="InteractiveGraphicHotspots" id="cm8718855767"><title><content-text></content-text></title><media ref="en0910000000/en0910010000/en0910010600/en0910010601/cm8718855767.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en0910000000/en0910010000/en0910010600/en0910010601/cm8718855767text.xml"/></content-media>
<content-text><p><b>Click Link-State Routing Process in the figure.</b></p> <p>We are now at the third step in the link-state routing process:</p> <p><b>Each router builds a Link-State Packet (LSP) containing the state of each directly connected link.</b></p> <p><b>Click R1 in the figure.</b></p> <p>Once a router has established its adjacencies, it can build its link-state packets (LSPs) that contain the link-state information about its links. A simplified version of the LSPs from R1 is:</p> <p>1. R1; Ethernet network 10.1.0.0/16; Cost 2</p> <p>2. R1 -> R2; Serial point-to-point network; 10.2.0.0/16; Cost 20</p> <p>3. R1 -> R3; Serial point-to-point network; 10.3.0.0/16; Cost 5</p> <p>4. R1 -> R4; Serial point-to-point network; 10.4.0.0/16; Cost 20</p></content-text>
</page>
</topic>
<topic type="" id="en0910010700">
<title><content-text>Flooding Link-State Packets to Neighbors</content-text></title>
<page type="OneColumn" id="en0910010701">
<content-media type="StaticGraphic" id="cm8072609255"><title><content-text></content-text></title><media ref="en0910000000/en0910010000/en0910010700/en0910010701/cm8072609255.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en0910000000/en0910010000/en0910010700/en0910010701/cm8072609255text.xml"/></content-media>
<content-text><p>As shown in the figure, the fourth step in the link-state routing process is:</p> <p><b>Each router floods the LSP to all neighbors, who then store all LSPs received in a database.</b></p> <p>Each router floods its link-state information to all other link-state routers in the routing area. Whenever a router receives an LSP from a neighboring router, it immediately sends that LSP out all other interfaces except the interface that received the LSP. This process creates a flooding effect of LSPs from all routers throughout the routing area. </p></content-text>
</page>
<page type="OneColumn" id="en0910010702">
<content-media type="AnimationPartialScreen" id="cm3485467135"><title><content-text></content-text></title><media ref="en0910000000/en0910010000/en0910010700/en0910010702/cm3485467135.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en0910000000/en0910010000/en0910010700/en0910010702/cm3485467135text.xml"/></content-media>
<content-text><p><b>Click Play to view the animation.</b></p> <p>As you can see in the animation, LSPs are flooded almost immediately after being received, without any intermediate calculations. Unlike distance vector routing protocols that must first run the Bellman-Ford algorithm to process routing updates <i>before</i> sending them to other routers, link-state routing protocols calculate the SPF algorithm <i>after</i> the flooding is complete. As a result, link-state routing protocols reach convergence much faster than distance vector routing protocols.</p> <p>Remember that LSPs do not need to be sent periodically. An LSP only needs to be sent:</p> <ul><li> During initial startup of the router or of the routing protocol process on that router</li> <li> Whenever there is a change in the topology, including a link going down or coming up, or a neighbor adjacency being established or broken</li></ul> <p>In addition to the link-state information, other information is included in the LSP - such as sequence numbers and aging information - to help manage the flooding process. This information is used by each router to determine if it has already received the LSP from another router or if the LSP has newer information than what is already contained in the <content-link target="cg6326428498" type="glossary">link-state database</content-link>. This process allows a router to keep only the most current information in its link-state database.</p> <p><b>Note:</b> How these sequence numbers and aging information is used is beyond the scope of this curriculum. Additional information can be found in <i>Routing TCP/IP</i> by Jeff Doyle.</p></content-text>
</page>
</topic>
<topic type="" id="en0910010800">
<title><content-text>Constructing a Link-State Database</content-text></title>
<page type="OneColumn" id="en0910010801">
<content-media type="StaticGraphic" id="cm6822911328"><title><content-text></content-text></title><media ref="en0910000000/en0910010000/en0910010800/en0910010801/cm6822911328.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en0910000000/en0910010000/en0910010800/en0910010801/cm6822911328text.xml"/></content-media>
<content-text><p>The final step in the link-state routing process is:</p> <p><b>Each router uses the database to construct a complete map of the topology and computes the best path to each destination network. </b></p> <p>After each router has propagated its own LSPs using the link-state flooding process, each router will then have an LSP from every <content-link target="cg3766747133" type="glossary">link-state router</content-link> in the routing area. These LSPs are stored in the link-state database. Each router in the routing area can now use the SPF algorithm to construct the SPF trees that you saw earlier. </p></content-text>
</page>
<page type="OneColumn" id="en0910010802">
<content-media type="InteractiveGraphicHotspots" id="cm1449751597"><title><content-text></content-text></title><media ref="en0910000000/en0910010000/en0910010800/en0910010802/cm1449751597.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en0910000000/en0910010000/en0910010800/en0910010802/cm1449751597text.xml"/></content-media>
<content-text><p>Let's take a look at the link-state database for R1 as well as the SPF tree that results from the calculation of the SPF algorithm. </p> <p><b>Click R1 Link-State Database in the figure.</b></p> <p>As a result of the flooding process, router R1 has learned the link-state information for each router in its routing area. The figure shows the link-state information that R1 has received and stored in its link-state database. Notice that R1 also includes its own link-state information in the link-state database.</p> <p><b>Click R1 SPF Tree in the figure.</b></p> <p>With a complete link-state database, R1 can now use the database and the shortest path first (SPF) algorithm to calculate the preferred path or shortest path to each network. In the figure, notice that R1 does not use the path between itself and R4 to reach any LAN in the topology, including the LAN attached to R4. The path through R3 has a lower cost. Also, R1 does not use the path between R2 and R5 to reach R5. The path through R3 has a lower cost. Each router in the topology determines the shortest path from its own perspective.</p> <p><b>Note</b>: The link-state database and the SPF tree would still include those directly connected networks, those links which have been shaded in the graphic.</p></content-text>
</page>
</topic>
<topic type="" id="en0910010900">
<title><content-text>Shortest Path First (SPF) Tree</content-text></title>
<page type="OneColumn" id="en0910010901">
<content-media type="InteractiveGraphicHotspots" id="cm6081970360"><title><content-text></content-text></title><media ref="en0910000000/en0910010000/en0910010900/en0910010901/cm6081970360.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en0910000000/en0910010000/en0910010900/en0910010901/cm6081970360text.xml"/></content-media>
<content-text><p><b>Building the SPF Tree</b></p> <p>Let's examine in more detail how R1 constructs its SPF tree. R1's current topology only includes its neighbors. However, using the link-state information from all other routers, R1 can now begin to construct an SPF tree of the network with itself at the root of the tree.</p> <p><b>Note</b>: The process described in this section is only a conceptual form of the SPF algorithm and SPF tree to help make it more understandable.</p> <p><b>Click R2 LSPs in the figure.</b></p> <p>The SPF algorithm begins by processing the following LSP information from R2:</p> <p>1. Connected to neighbor R1 on network 10.2.0.0/16, cost of 20</p> <p>2. Connected to neighbor R5 on network 10.9.0.0/16, cost of 10</p> <p>3. Has a network 10.5.0.0/16, cost of 2</p> <p>R1 can ignore the first LSP, because R1 already knows that it is connected to R2 on network 10.2.0.0/16 with a cost of 20. R1 can use the second LSP and create a link from R2 to another router, R5, with the network 10.9.0.0/16 and a cost of 10. This information is added to the SPF tree. Using the third LSP, R1 has learned that R2 has a network 10.5.0.0/16 with a cost of 2 and with no neighbors. This link is added to R1's SPF tree.</p> <p><b>Click R3 LSPs in the figure.</b></p> <p>The SPF algorithm now processes the LSPs from R3:</p> <p>1. Connected to neighbor R1 on network 10.3.0.0/16, cost of 5</p> <p>2. Connected to neighbor R4 on network 10.7.0.0/16, cost of 10</p> <p>3. Has a network 10.6.0.0/16, cost of 2</p> <p>R1 can ignore the first LSP, because R1 already knows that it is connected to R3 on network 10.3.0.0/16 with a cost of 5. R1 can use the second LSP and create a link from R3 to the router R4, with the network 10.7.0.0/16 and a cost of 10. This information is added to the SPF tree. Using the third LSP, R1 has learned that R3 has a network 10.6.0.0/16 with a cost of 2 and with no neighbors. This link is added to R1's SPF tree.</p> <p><b>Click R4 LSPs in the figure.</b></p> <p>The SPF algorithm now processes the LSPs from R4:</p> <p>1. Connected to neighbor R1 on network 10.4.0.0/16, cost of 20</p> <p>2. Connected to neighbor R3 on network 10.7.0.0/16, cost of 10</p> <p>3. Connected to neighbor R5 on network 10.10.0.0/16, cost of 10</p> <p>4. Has a network 10.8.0.0/16, cost of 2</p> <p>R1 can ignore the first LSP because R1 already knows that it is connected to R4 on network 10.4.0.0/16 with a cost of 20. R1 can also ignore the second LSP because SPF has already learned about the network 10.6.0.0/16 with a cost of 10 from R3. </p> <p>However, R1 can use the third LSP to create a link from R4 to the router R5, with the network 10.10.0.0/16 and a cost of 10. This information is added to the SPF tree. Using the fourth LSP, R1 learns that R4 has a network 10.8.0.0/16 with a cost of 2 and with no neighbors. This link is added to R1's SPF tree.</p> <p><b>Click R5 LSPs in the figure.</b></p> <p>The SPF algorithm now processes the final LSPs from R5:</p> <p>1. Connected to neighbor R2 on network 10.9.0.0/16, cost of 10</p> <p>2. Connected to neighbor R4 on network 10.10.0.0/16, cost of 10</p> <p>3. Has a network 10.11.0.0/16, cost of 2</p> <p>R1 can ignore the first two LSPs (for the networks 10.9.0.0/16 and 10.10.0.0/16), because SPF has already learned about these links and added them to the SPF tree. R1 can process the third LSP learning that R5 has a network 10.11.0.0/16 with a cost of 2 and with no neighbors. This link is added to the SPF tree for R1.</p></content-text>
</page>
<page type="OneColumn" id="en0910010902">
<content-media type="StaticGraphic" id="cm6077271600"><title><content-text></content-text></title><media ref="en0910000000/en0910010000/en0910010900/en0910010902/cm6077271600.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en0910000000/en0910010000/en0910010900/en0910010902/cm6077271600text.xml"/></content-media>
<content-text><p><b>Determining the Shortest Path</b></p> <p>Because all LSPs have been processed using the SPF algorithm, R1 has now constructed the complete SPF tree. The 10.4.0.0/16 and 10.9.0.0/16 links are not used to reach other networks, because lower-cost or shorter paths exist. However these networks still exist as part of the SPF tree and are used to reach devices on those networks. </p> <p><b>Note</b>: The actual SPF algorithm determines the shortest path as it is building the SPF tree. We have done it in two steps to simplify the understanding of the algorithm.</p> <p>The figure shows the SPF tree for R1. Using this tree, the SPF algorithm results indicate the shortest path to each network. Only the LANs are shown in the table, but SPF can also be used to determine the shortest path to each WAN link network. In this case, R1 determines that the shortest path for each network is:</p> <p>Network 10.5.0.0/16 via R2 serial 0/0/0 at a cost of 22</p> <p>Network 10.6.0.0/16 via R3 serial 0/0/1 at a cost of 7</p> <p>Network 10.7.0.0/16 via R3 serial 0/0/1 at a cost of 15</p> <p>Network 10.8.0.0/16 via R3 serial 0/0/1 at a cost of 17</p> <p>Network 10.9.0.0/16 via R2 serial 0/0/0 at a cost of 30</p> <p>Network 10.10.0.0/16 via R3 serial 0/0/1 at a cost of 25</p> <p>Network 10.11.0.0/16 via R3 serial 0/0/1 at a cost of 27</p> <p>Each router constructs its own SPF tree independently from all other routers. To ensure proper routing, the link-state databases used to construct those trees must be identical on all routers. In Chapter 11, "OSFP," we will examine this in more detail.</p></content-text>
</page>
<page type="OneColumn" id="en0910010903">
<content-media type="StaticGraphic" id="cm6010957744"><title><content-text></content-text></title><media ref="en0910000000/en0910010000/en0910010900/en0910010903/cm6010957744.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en0910000000/en0910010000/en0910010900/en0910010903/cm6010957744text.xml"/></content-media>
<content-text><p><b>Generating a Routing Table from the SPF Tree</b></p> <p>Using the shortest path information determined by the SPF algorithm, these paths can now be added to the routing table. You can see in the figure how the following routes have now been added to R1's routing table:</p> <ul><li> 10.5.0.0/16 via R2 Serial 0/0/0, cost = 22</li> <li> 10.6.0.0/16 via R3 Serial 0/0/1, cost = 7</li> <li> 10.7.0.0/16 via R3 Serial 0/0/1, cost = 15</li> <li> 10.8.0.0/16 via R3 Serial 0/0/1, cost = 17</li> <li> 10.9.0.0/16 via R2 Serial 0/0/0, cost = 30</li> <li> 10.10.0.0/16 via R3 Serial 0/0/1, cost = 25</li> <li> 10.11.0.0/16 via R3 Serial 0/0/1, cost = 27</li></ul> <p>The routing table will also include all directly connected networks and routes from any other sources, such as static routes. Packets will now be forwarded according to these entries in the routing table.</p></content-text>
</page>
</topic>
</section>
<section type="" id="en0910020000">
<title><content-text>Implementing Link-State Routing Protocols</content-text></title>
<topic type="" id="en0910020100">
<title><content-text>Advantages of a Link-State Routing Protocol</content-text></title>
<page type="OneColumn" id="en0910020101">
<content-media type="StaticGraphic" id="cm2203343252"><title><content-text></content-text></title><media ref="en0910000000/en0910020000/en0910020100/en0910020101/cm2203343252.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en0910000000/en0910020000/en0910020100/en0910020101/cm2203343252text.xml"/></content-media>
<content-text><p>There are several advantages of link-state routing protocols compared to distance vector routing protocols. </p> <p><b>Builds a Topological Map</b></p> <p>Link-state routing protocols create a topological map, or SPF tree of the network topology. Distance vector routing protocols do not have a topological map of the network. Routers implementing a distance vector routing protocol only have a list of networks, which includes the cost (distance) and next-hop routers (direction) to those networks. Because link-state routing protocols exchange link-states, the SPF algorithm can build an SPF tree of the network. Using the SPF tree, each router can independently determine the shortest path to every network.</p> <p><b>Fast Convergence</b></p> <p>When receiving a Link-state Packet (LSP), link-state routing protocols immediately flood the LSP out all interfaces except for the interface from which the LSP was received. A router using a distance vector routing protocol needs to process each routing update and update its routing table before flooding them out other interfaces, even with triggered updates. Faster convergence is achieved for link-state routing protocols. A notable exception is EIGRP.</p> <p><b>Event-driven Updates</b></p> <p>After the initial flooding of LSPs, link-state routing protocols only send out an LSP when there is a change in the topology. The LSP contains only the information regarding the affected link. Unlike some distance vector routing protocols, link-state routing protocols do not send periodic updates.</p> <p><b>Note:</b> OSPF routers <i>do</i> flood their own link-states every 30 minutes. This is known as a paranoid update and is discussed in the following chapter. Also, not all distance vector routing protocols send periodic updates. RIP and IGRP send periodic updates; however, EIGRP does not.</p> <p><b>Hierarchical Design</b></p> <p>Link-state routing protocols such as OSPF and IS-IS use the concept of <i>areas</i>. Multiple areas create a hierarchical design to networks, allowing for better route aggregation (summarization) and the isolation of routing issues within an area. Multi-area OSPF and IS-IS are discussed further in CCNP.</p></content-text>
</page>
</topic>
<topic type="" id="en0910020200">
<title><content-text>Requirements of a Link-State Routing Protocol</content-text></title>
<page type="OneColumn" id="en0910020201">
<content-media type="StaticGraphic" id="cm1510596035"><title><content-text></content-text></title><media ref="en0910000000/en0910020000/en0910020200/en0910020201/cm1510596035.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en0910000000/en0910020000/en0910020200/en0910020201/cm1510596035text.xml"/></content-media>
<content-text><p>Modern link-state routing protocols are designed to minimize the effects on memory, CPU, and bandwidth. The use and configuration of multiple areas can reduce the size of the link-state databases. Multiple areas can also limit the amount of link-state information flooding in a routing domain and send LSPs only to those routers that need them.</p> <p>For example, when there is a change in the topology, only those routers in the affected area receive the LSP and run the SPF algorithm. This can help isolate an unstable link to a specific area in the routing domain. In the figure, there are three separate routing domains: Area 1, Area 0, and Area 51. If a network in Area 51 goes down, the LSP with the information about this downed link is only flooded to other routers in that area. Only routers in Area 51 will need to update their link-state databases, rerun the SPF algorithm, create a new SPF tree, and update their routing tables. Routers in other areas will learn that this route is down, but this will be done with a type of link-state packet that does not cause them to rerun their SPF algorithm. Routers in other areas can update their routing tables directly.</p> <p><b>Note: </b>Multiple areas with OSPF and IS-IS are discussed in CCNP.</p></content-text>
</page>
<page type="OneColumn" id="en0910020202">
<content-media type="StaticGraphic" id="cm4815294802"><title><content-text></content-text></title><media ref="en0910000000/en0910020000/en0910020200/en0910020202/cm4815294802.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en0910000000/en0910020000/en0910020200/en0910020202/cm4815294802text.xml"/></content-media>
<content-text><p><b>Memory Requirements</b></p> <p>Link-state routing protocols typically require more memory, more CPU processing, and at times more bandwidth than distance vector routing protocols. The memory requirements are due to the use of link-state databases and the creation of the SPF tree. </p> <p><b>Processing Requirements</b></p> <p>Link-state protocols can also require more CPU processing than distance vector routing protocols. The SPF algorithm requires more CPU time than distance vector algorithms such as Bellman-Ford because link-state protocols build a complete map of the topology. </p> <p><b>Bandwidth Requirements</b></p> <p>The flooding of link-state packets can adversely affect the available bandwidth on a network. This should only occur during initial startup of routers, but can also be an issue on unstable networks.</p></content-text>
</page>
</topic>
<topic type="" id="en0910020300">
<title><content-text>Comparison of Link-State Routing Protocols</content-text></title>
<page type="OneColumn" id="en0910020301">
<content-media type="StaticGraphic" id="cm9941600669"><title><content-text></content-text></title><media ref="en0910000000/en0910020000/en0910020300/en0910020301/cm9941600669.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en0910000000/en0910020000/en0910020300/en0910020301/cm9941600669text.xml"/></content-media>
<content-text><p>There are two link-state routing protocols used for routing IP today:</p> <ul><li> Open Shortest Path First (OSPF)</li> <li> Intermediate System-to-Intermediate System (IS-IS)</li></ul> <p><b>OSPF</b></p> <p>OSPF was designed by the IETF (Internet Engineering Task Force) OSPF Working Group, which still exists today. The development of OSPF began in 1987 and there are two current versions in use:</p> <ul><li> OSPFv2: OSPF for IPv4 networks (RFC 1247 and RFC 2328)</li> <li> OSPFv3: OSPF for IPv6 networks (RFC 2740)</li></ul> <p>Most of the work on OSPF was done by John Moy, author of most of the RFCs regarding OSPF. His book, <i>OSPF, Anatomy of an Internet Routing Protocol, </i>provides interesting insight to the development of OSPF.</p> <p><b>Note:</b> OSPF is discussed in the following chapter. Multiple Area OSPF and OSPFv3 are discussed in CCNP.</p> <p><b>IS-IS</b></p> <p>IS-IS was designed by ISO (International Organization for Standardization) and is described in ISO 10589. The first incarnation of this routing protocol was developed at DEC (Digital Equipment Corporation) and is known as DECnet Phase V. Radia Perlman was the chief designer of the IS-IS routing protocol.</p> <p>IS-IS was originally designed for the OSI protocol suite and not the TCP/IP protocol suite. Later, Integrated IS-IS, or Dual IS-IS, included support for IP networks. Although IS-IS has been known as the routing protocol used mainly by ISPs and carriers, more enterprise networks are beginning to use IS-IS.</p> <p>OSPF and IS-IS share many similarities and also have many differences. There are many pro-OSPF and pro-IS-IS factions who discuss and debate the advantages of one routing protocol over the other. Both routing protocols provide the necessary routing functionality needed. You can learn more about IS-IS and OSPF in CCNP and begin to make your own determination if one protocol is more advantageous than the other.</p></content-text>
</page>
</topic>
</section>
<section type="ChapterSummary" id="en0910030000">
<title><content-text>Chapter Summary</content-text></title>
<topic type="" id="en0910030100">
<title><content-text>Summary and Review</content-text></title>
<page type="OneColumn" id="en0910030101">
<content-media type="StaticGraphic" id="cm9433367907"><title><content-text></content-text></title><media ref="en0910000000/en0910030000/en0910030100/en0910030101/cm9433367907.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en0910000000/en0910030000/en0910030100/en0910030101/cm9433367907text.xml"/></content-media>
<content-text><p><b>Summary</b></p> <p>Link-state routing protocols are also known as shortest path first protocols and are built around Edsger Dijkstra's shortest path first (SPF) algorithm. There are two link-state routing protocols for IP: OSPF (Open Shortest Path First) and IS-IS (Intermediate-System-to-Intermediate-System). </p> <p>The link-state process can be summarized as follows:</p> <p>1. Each router learns about its own directly connected networks.</p> <p>2. Each router is responsible for "saying hello" to its neighbors on directly connected networks. </p> <p>3. Each router builds a Link-State Packet (LSP) containing the state of each directly connected link. </p> <p>4. Each router floods the LSP to all neighbors, who then store all LSPs received in a database. </p> <p>5. Each router uses the database to construct a complete map of the topology and computes the best path to each destination network.</p> <p>A link is an interface on the router. A link-state is the information about that interface including its IP address and subnet mask, the type of network, the cost associated with the link, and any neighbor routers on that link.</p> <p>Each router determines its own link-states and floods the information to all other routers in the area. As a result, each router builds a link-state database (LSDB) containing the link-state information from all other routers. Each router will have identical LSDBs. Using the information in the LSDB, each router will run the SPF algorithm. The SPF algorithm will create an SPF tree, with the router at the root of the tree. As each link is connected to other links, the SPF tree is created. Once the SPF tree is completed, the router can determine on its own the best path to each network in the tree. This best path information is then stored in the router's routing table.</p> <p>Link-state routing protocols build a local topology map of the network that allows each router to determine the best path to a given network. A new LSP is sent only when there is a change in the topology. When a link is added, removed or modified, the router will flood the new LSP to all other routers. When a router receives the new LSP, it will update is LSDB, rerun the SPF algorithm, create a new SPF tree, and update its routing table.</p> <p>Link-state routing protocols tend to have a faster convergence time than distance vector routing protocols. A notable exception is EIGRP. However, link-state routing protocols do require more memory and processing requirements. This is usually not an issue with today's newer routers.</p> <p>In the next and final chapter of this course, you will learn about the link-state routing protocol, OSPF.</p></content-text>
</page>
<page type="FullScreen" id="en0910030102">
<content-media type="ChapterSummary" id="cm8554999632"><title><content-text></content-text></title><media ref="en0910000000/en0910030000/en0910030100/en0910030102/cm8554999632.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en0910000000/en0910030000/en0910030100/en0910030102/cm8554999632text.xml"/></content-media>
<content-text></content-text>
</page>
<page type="OneColumn" id="en0910030103">
<content-media type="ActivityPKA" id="cm8924269861"><title><content-text></content-text></title><media ref="en0910000000/en0910030000/en0910030100/en0910030103/cm8924269861/" mime="application/packettracer" scale="true" type="directory" width="0" height="0" external="en0910000000/en0910030000/en0910030100/en0910030103/cm8924269861/icontext.xml"/></content-media>
<content-text><p>The Packet Tracer Skills Integration Challenge Activity for this chapter is very similar to the activity you completed at the end of Chapter 9. The scenario is slightly different, allowing you to better practice your skills. </p> <p><content-link target="E2_PTAct_10_3_1_Directions.pdf" type="internalfile">Packet Tracer Skills Integration Instructions (PDF)</content-link></p><p><b>Click the packet tracer icon for more details.</b></p></content-text>
</page>
<page type="OneColumn" id="en0910030104">
<content-media type="StaticGraphic" id="cm8755185144"><title><content-text></content-text></title><media ref="en0910000000/en0910030000/en0910030100/en0910030104/cm8755185144.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en0910000000/en0910030000/en0910030100/en0910030104/cm8755185144text.xml"/></content-media>
<content-text><p><b>To Learn More</b></p> <p><b>Suggested Books</b></p> <p>Understanding the SPF algorithm is not difficult. There are several good books and online resources that explain Dijkstra's algorithm and how it is used in networking. There are several web sites devoted to explaining how these algorithms work. Seek out some of the resources and familiarize yourself with how this algorithm works.</p> <p>Here are some suggested resources:</p> <ul><li> <i>Interconnections, Bridges, Routers, Switches, and Internetworking Protocols</i>, by Radia Perlman</li> <li> <i>Cisco IP Routing</i>, by Alex Zinin</li> <li> <i>Routing the Internet</i>, by Christian Huitema</li></ul> <p><b>Classroom Analogy</b></p> <p>An exercise to help you understand the SPF algorithm can be done with a classroom of students and a set of index cards. Each student gets a set four index cards. On the first index card the student will write down their name along with the name of the student sitting to their left. If there is not a student there, have them write the word "none". On the next card the student will do the same thing but for the student on their right. The next two cards are for the students sitting in front, and sitting in back. These index cards are representative of link-state information.</p> <p>For example, Teri has a set of four cards with the following information:</p> <ul><li> Teri ---> Jen</li> <li> Teri --->Pat</li> <li> Teri --->Rick</li> <li> Teri --->Allan</li></ul> <p>Once all of the students in the classroom have filled out the index cards, the instructor collects all of the index cards. This is similar to the link-state flooding process. The stack of index cards is similar to the link-state database. In a network, all routers would have this identical link-state database.</p> <p>The instructor takes each card and lists the name and the neighbor student on the board with a line between them. After all of the index cards are transcribed to the board, the end result will be a map of the students in the classroom. To make it easier, the instructor should map the names similar to how students are sitting in the classroom, for example, Jen is sitting to the left of Teri. This is similar to the SPF tree that a link-state routing protocol creates.</p> <p>Using this topology map on the board the instructor can see all of the paths to the various students in the class.</p></content-text>
</page>
</topic>
</section>
<section type="ChapterQuiz" id="en0910040000">
<title><content-text>Chapter Quiz</content-text></title>
<topic type="" id="en0910040100">
<title><content-text>Chapter Quiz</content-text></title>
<page type="FullScreen" id="en0910040101">
<content-media type="ChapterQuiz" id="cm5810292603"><title><content-text></content-text></title><media ref="en0910000000/en0910040000/en0910040100/en0910040101/cm5810292603/" mime="" scale="true" type="directory" width="100%" height="100%" external="en0910000000/en0910040000/en0910040100/en0910040101/cm5810292603/icontext.xml"/></content-media>
<content-text></content-text>
</page>
</topic>
</section>
</chapter>
