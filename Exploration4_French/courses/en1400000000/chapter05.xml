<chapter type="" id="en1405000000">
<title><content-text>ACLs</content-text></title>
<section type="ChapterIntroduction" id="en1405000000">
<title><content-text>Introduction</content-text></title>
<topic type="" id="en1405000100">
<title><content-text>Introduction</content-text></title>
<page type="OneColumn" id="en1405000101">
<content-media type="ChapterIntroduction" id="cm5680274071">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405000000/en1405000100/en1405000101/cm5680274071.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405000000/en1405000100/en1405000101/cm5680274071text.xml"/></content-media>
<content-text><p>Network security is a huge subject, and much of it is far beyond the scope of this course. However, one of the most important skills a network administrator needs is mastery of access control lists (ACLs). Administrators use ACLs to stop traffic or permit only specified traffic while stopping all other traffic on their networks. This chapter includes an opportunity to develop your mastery of ACLs with a series of lessons, activities, and lab exercises.</p> <p>Network designers use firewalls to protect networks from unauthorized use. Firewalls are hardware or software solutions that enforce network security policies. Consider a lock on a door to a room inside a building. The lock only allows authorized users with a key or access card to pass through the door. Similarly, a firewall filters unauthorized or potentially dangerous packets from entering the network. On a Cisco router, you can configure a simple firewall that provides basic traffic filtering capabilities using ACLs. </p> <p>An ACL is a sequential list of permit or deny statements that apply to addresses or upper-layer protocols. ACLs provide a powerful way to control traffic into and out of your network. You can configure ACLs for all routed network protocols. </p> <p>The most important reason to configure ACLs is to provide security for your network. This chapter explains how to use standard and extended ACLs as part of a security solution and teaches you how to configure them on a Cisco router. Included are tips, considerations, recommendations, and general guidelines on how to use ACLs. </p></content-text>
</page>
</topic>
</section>
<section type="" id="en1405010000">
<title><content-text>Using ACLs to Secure Networks</content-text></title>
<topic type="" id="en1405010100">
<title><content-text>A TCP Conversation</content-text></title>
<page type="OneColumn" id="en1405010101">
<content-media type="StaticGraphic" id="cm3263797222">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405010000/en1405010100/en1405010101/cm3263797222.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405010000/en1405010100/en1405010101/cm3263797222text.xml"/></content-media>
<content-text><p>ACLs enable you to control traffic into and out of your network. This control can be as simple as permitting or denying network hosts or addresses. However, ACLs can also be configured to control network traffic based on the TCP port being used. To understand how an ACL works with TCP, let us look at the dialogue that occurs during a TCP conversation when you download a webpage to your computer.</p> <p>When you request data from a web server, IP takes care of the communication between the PC and the server. TCP takes care of the communication between your web browser (application) and the network server software. When you send an e-mail, look at a webpage, or download a file, TCP is responsible for breaking data down into packets for IP before they are sent, and for assembling the data from the packets when they arrive. The TCP process is very much like a conversation in which two nodes on a network agree to pass data between one another. </p> <p>Recall that TCP provides a connection-oriented, reliable, byte stream service. The term connection-oriented means that the two applications using TCP must establish a TCP connection with each other before they can exchange data. TCP is a full-duplex protocol, meaning that each TCP connection supports a pair of byte streams, each stream flowing in one direction. TCP includes a flow-control mechanism for each byte stream that allows the receiver to limit how much data the sender can transmit. TCP also implements a congestion-control mechanism.</p> <p><b>Click the play button in the figure </b>to view the animation.</p> <p>The animation shows how a TCP/IP conversation takes place. TCP packets are marked with flags that denote their purpose: a SYN starts (synchronizes) the session; an ACK is an <content-link target="{5BD1CB6F-D813-41FC-957A-674825DFA6C6}" type="glossary">acknowledgment</content-link> that an expected packet was received, and a FIN finishes the session. A SYN/ACK acknowledges that the transfer is synchronized. TCP data segments include the higher level protocol needed to direct the application data to the correct application. </p> <p><b>Click the TCP/UDP Port Numbers button In the figure.</b></p> <p>The TCP data segment also identifies the port matching the requested service. For example, HTTP is port 80, <content-link target="{24CE73E3-8272-411F-A003-3BCA8A0A690F}" type="glossary">SMTP</content-link> is port 25, and FTP is port 20 and port 21. The figure shows examples of UDP and TCP ports.</p> <p><b>Click the buttons in the figure</b> to explore TCP/UDP ports.</p></content-text>
</page>
</topic>
<topic type="" id="en1405010200">
<title><content-text>Packet Filtering</content-text></title>
<page type="OneColumn" id="en1405010201">
<content-media type="StaticGraphic" id="cm3905391231">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405010000/en1405010200/en1405010201/cm3905391231.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405010000/en1405010200/en1405010201/cm3905391231text.xml"/></content-media>
<content-text><p>Packet filtering, sometimes called static packet filtering, controls access to a network by analyzing the incoming and outgoing packets and passing or halting them based on stated criteria. </p> <p>A router acts as a packet filter when it forwards or denies packets according to filtering rules. When a packet arrives at the packet-filtering router, the router extracts certain information from the packet header and makes decisions according to the filter rules as to whether the packet can pass through or be discarded. Packet filtering works at the Network layer of the Open Systems Interconnection (OSI) model, or the Internet layer of TCP/IP.</p> <p>As a Layer 3 device, a packet-filtering router uses rules to determine whether to permit or deny traffic based on source and destination IP addresses, <content-link target="{441C7EAE-60F8-44FB-BA7D-5E7A328EA87A}" type="glossary">source port</content-link> and <content-link target="{ABABC373-9634-45E2-B00C-B3993E9C39B9}" type="glossary">destination port</content-link>, and the protocol of the packet. These rules are defined using access control lists or ACLs. </p> <p>Recall that an ACL is a sequential list of permit or deny statements that apply to IP addresses or upper-layer protocols. The ACL can extract the following information from the packet header, test it against its rules, and make "allow" or "deny" decisions based on:</p> <p><ul><li>Source IP address</li><li>Destination IP address</li><li>ICMP message type</li></ul></p> <p>The ACL can also extract upper layer information and test it against its rules. Upper layer information includes:</p> <p><ul><li>TCP/UDP source port</li><li>TCP/UDP destination port</li></ul></p> <p><b>Click the buttons in the figure</b> for an overview of how an ACL allows or denies a packet. Although the animations display packet filtering occurring at Layer 3, it should be noted that filtering could also occur at Layer 4.</p></content-text>
</page>
<page type="OneColumn" id="en1405010202">
<content-media type="StaticGraphic" id="cm3855881543">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405010000/en1405010200/en1405010202/cm3855881543.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405010000/en1405010200/en1405010202/cm3855881543text.xml"/></content-media>
<content-text><p><b>Packet Filtering Example</b></p> <p>To understand the concept of how a router uses packet filtering, imagine that a guard has been posted at a locked door. The guard's instructions are to allow only people whose names appear on a list to pass through the door. The guard is filtering people based on the criterion of having their names on the authorized list.</p> <p>For example, you could say, "Only permit web access to users from network A. Deny web access to users from network B, but permit them to have all other access." Refer to the figure to examine the decision path the packet filter uses to accomplish this task. </p> <p>For this scenario, the packet filter looks at each packet as follows:</p> <p><ul><li>If the packet is a TCP SYN from network A using port 80, it is allowed to pass. All other access is denied to those users.</li><li>If the packet is a TCP SYN from network B using port 80, it is blocked. However, all other access is permitted.</li></ul></p> <p>This is just a simple example. You can configure multiple rules to further permit or deny services to specific users. You can also filter packets at the port level using an extended ACL, which is covered in Section 3.</p></content-text>
</page>
</topic>
<topic type="" id="en1405010300">
<title><content-text>What is an ACL?</content-text></title>
<page type="OneColumn" id="en1405010301">
<content-media type="StaticGraphic" id="cm2831656548">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405010000/en1405010300/en1405010301/cm2831656548.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405010000/en1405010300/en1405010301/cm2831656548text.xml"/></content-media>
<content-text><p>An ACL is a router configuration script that controls whether a router permits or denies packets to pass based on criteria found in the packet header. ACLs are among the most commonly used objects in Cisco IOS software. ACLs are also used for selecting types of traffic to be analyzed, forwarded, or processed in other ways. </p> <p>As each packet comes through an interface with an associated ACL, the ACL is checked from top to bottom, one line at a time, looking for a pattern matching the incoming packet. The ACL enforces one or more corporate security policies by applying a permit or deny rule to determine the fate of the packet. ACLs can be configured to control access to a network or subnet. </p> <p>By default, a router does not have any ACLs configured and therefore does not filter traffic. Traffic that enters the router is routed according to the routing table. If you do not use ACLs on the router, all packets that can be routed through the router pass through the router to the next network segment.</p> <p>Here are some guidelines for using ACLs:</p> <p><ul><li>Use ACLs in firewall routers positioned between your internal network and an external network such as the Internet. </li><li>Use ACLs on a router positioned between two parts of your network to control traffic entering or exiting a specific part of your internal network. </li><li>Configure ACLs on border routers-routers situated at the edges of your networks. This provides a very basic buffer from the outside network, or between a less controlled area of your own network and a more sensitive area of your network. </li><li>Configure ACLs for each network protocol configured on the border router interfaces. You can configure ACLs on an interface to filter inbound traffic, outbound traffic, or both.</li></ul></p> <p><b>Click the ACLs on a Router button in the figure.</b></p> <p><b>The Three Ps</b></p> <p>A general rule for applying ACLs on a router can be recalled by remembering the three Ps. You can configure one ACL per protocol, per direction, per interface: </p> <p><ul><li><b>One ACL per protocol</b>-To control traffic flow on an interface, an ACL must be defined for each protocol enabled on the interface. </li><li><b>One ACL per direction</b>-ACLs control traffic in one direction at a time on an interface. Two separate ACLs must be created to control inbound and outbound traffic. </li><li><b>One ACL per interface</b>-ACLs control traffic for an interface, for example, <content-link target="{D5A87C5D-D58F-4F8F-8703-6DF905E32FBD}" type="glossary">Fast Ethernet</content-link> 0/0.</li></ul></p> <p>Writing ACLs can be a challenging and complex task. Every interface can have multiple protocols and directions defined. The router in the example has two interfaces configured for IP: AppleTalk and IPX. This router could possibly require 12 separate ACLs-one ACL for each protocol, times two for each direction, times two for the number of ports. </p> <p>ACLs perform the following tasks:</p> <p><ul><li>Limit network traffic to increase network performance. For example, if corporate policy does not allow video traffic on the network, ACLs that block video traffic could be configured and applied. This would greatly reduce the network load and increase network performance. </li><li>Provide traffic flow control. ACLs can restrict the delivery of routing updates. If updates are not required because of network conditions, bandwidth is preserved. </li><li>Provide a basic level of security for network access. ACLs can allow one host to access a part of the network and prevent another host from accessing the same area. For example, access to the Human Resources network can be restricted to select users. </li><li>Decide which types of traffic to forward or block at the router interfaces. For example, an ACL can permit e-mail traffic, but block all Telnet traffic. </li><li>Control which areas a client can access on a network. </li><li>Screen hosts to permit or deny access to network services. ACLs can permit or deny a user to access file types, such as FTP or HTTP.</li></ul></p> <p>ACLs inspect network packets based on criteria, such as source address, destination address, protocols, and port numbers. In addition to either permitting or denying traffic, an ACL can classify traffic to enable priority processing down the line. This capability is similar to having a VIP pass at a concert or sporting event. The VIP pass gives selected guests privileges not offered to general admission ticket holders, such as being able to enter a restricted area and be escorted to their box seats.</p></content-text>
</page>
</topic>
<topic type="" id="en1405010400">
<title><content-text>ACL Operation</content-text></title>
<page type="OneColumn" id="en1405010401">
<content-media type="StaticGraphic" id="cm2216638840">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405010000/en1405010400/en1405010401/cm2216638840.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405010000/en1405010400/en1405010401/cm2216638840text.xml"/></content-media>
<content-text><p><b>How ACLs Work</b></p> <p>ACLs define the set of rules that give added control for packets that enter inbound interfaces, packets that relay through the router, and packets that exit outbound interfaces of the router. ACLs do not act on packets that originate from the router itself. </p> <p>ACLs are configured either to apply to inbound traffic or to apply to outbound traffic.</p> <p><ul><li><b>Inbound ACLs</b>-Incoming packets are processed before they are routed to the outbound interface. An inbound ACL is efficient because it saves the overhead of routing lookups if the packet is discarded. If the packet is permitted by the tests, it is then processed for routing. </li><li><b>Outbound ACLs</b>-Incoming packets are routed to the outbound interface, and then they are processed through the outbound ACL.</li></ul></p> <p>ACL statements operate in sequential order. They evaluate packets against the ACL, from the top down, one statement at a time. </p> <p>The figure shows the logic for an inbound ACL. If a packet header and an ACL statement match, the rest of the statements in the list are skipped, and the packet is permitted or denied as determined by the matched statement. If a packet header does not match an ACL statement, the packet is tested against the next statement in the list. This matching process continues until the end of the list is reached.</p> <p>A final implied statement covers all packets for which conditions did not test true. This final test condition matches all other packets and results in a "deny" instruction. Instead of proceeding into or out of an interface, the router drops all of these remaining packets. This final statement is often referred to as the "implicit deny any statement" or the "deny all traffic" statement. Because of this statement, an ACL should have at least one permit statement in it; otherwise, the ACL blocks all traffic.</p> <p>You can apply an ACL to multiple interfaces. However, there can be only one ACL per protocol, per direction, and per interface.</p> <p><b>Click the Outbound ACLs button in the figure. </b></p> <p>The figure shows the logic for an oubound ACL. Before a packet is forwarded to an outbound interface, the router checks the routing table to see if the packet is routable. If the packet is not routable, it is dropped. Next, the router checks to see whether the outbound interface is grouped to an ACL. If the outbound interface is not grouped to an ACL, the packet can be sent to the output buffer. Examples of outbound ACL operation are as follows: </p> <p><ul><li>If the outbound interface is not grouped to an outbound ACL, the packet is sent directly to the outbound interface. </li><li> If the outbound interface is grouped to an outbound ACL, the packet is not sent out on the outbound interface until it is tested by the combination of ACL statements that are associated with that interface. Based on the ACL tests, the packet is permitted or denied.</li></ul></p> <p>For outbound lists, "to permit" means to send the packet to the output buffer, and "to deny" means to discard the packet. </p></content-text>
</page>
<page type="OneColumn" id="en1405010402">
<content-media type="InteractiveGraphicHotspots" id="cm5386173190">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405010000/en1405010400/en1405010402/cm5386173190.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405010000/en1405010400/en1405010402/cm5386173190text.xml"/></content-media>
<content-text><p><b>ACL and Routing and ACL Processes on a Router</b></p> <p>The figure shows the logic of routing and ACL processes on a router. When a packet arrives at a router interface, the router process is the same, whether ACLs are used or not. As a frame enters an interface, the router checks to see whether the destination Layer 2 address matches its own or if the frame is a broadcast frame. </p> <p>If the frame address is accepted, the frame information is stripped off and the router checks for an ACL on the inbound interface. If an ACL exists, the packet is now tested against the statements in the list. </p> <p>If the packet matches a statement, the packet is either accepted or rejected. If the packet is accepted in the interface, it is then checked against routing table entries to determine the destination interface and switched to that interface. </p> <p>Next, the router checks whether the destination interface has an ACL. If an ACL exists, the packet is tested against the statements in the list. </p> <p>If the packet matches a statement, it is either accepted or rejected. </p> <p>If there is no ACL or the packet is accepted, the packet is encapsulated in the new Layer 2 protocol and forwarded out the interface to the next device.</p> <p><b>The Implied "Deny All Traffic" Criteria Statement</b></p> <p>At the end of every access list is an implied "deny all traffic" criteria statement. It is also sometimes referred to as the "implicit deny any" statement. Therefore, if a packet does not match any of the ACL entries, it is automatically blocked. The implied "deny all traffic" is the default behavior of ACLs and cannot be changed. </p> <p>There is a key caveat associated with this "deny all" behavior: For most protocols, if you define an inbound access list for traffic filtering, you should include explicit access list criteria statements to permit routing updates. If you do not, you might effectively lose communication from the interface when routing updates are blocked by the implicit "deny all traffic" statement at the end of the access list.</p></content-text>
</page>
</topic>
<topic type="" id="en1405010500">
<title><content-text>Types of Cisco ACLs</content-text></title>
<page type="OneColumn" id="en1405010501">
<content-media type="StaticGraphic" id="cm6647878239">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405010000/en1405010500/en1405010501/cm6647878239.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405010000/en1405010500/en1405010501/cm6647878239text.xml"/></content-media>
<content-text><p>There are two types of Cisco ACLs, standard and extended.</p> <p><b>Standard ACLs</b></p> <p>Standard ACLs allow you to permit or deny traffic from source IP addresses. The destination of the packet and the ports involved do not matter. The example allows all traffic from network 192.168.30.0/24 network. Because of the implied "deny any" at the end, all other traffic is blocked with this ACL. Standard ACLs are created in global configuration mode.</p> <p><b>Click the Extended ACLs button in the figure.</b></p> <p><b>Extended ACLs</b></p> <p>Extended ACLs filter IP packets based on several attributes, for example, protocol type, source and IP address, destination IP address, source TCP or UDP ports, destination TCP or UDP ports, and optional protocol type information for finer granularity of control. In the figure, ACL 103 permits traffic originating from any address on the 192.168.30.0/24 network to any destination host port 80 (HTTP). Extended ACLs are created in global configuration mode. </p>  <p>The commands for ACLs are explained in the next few topics.</p></content-text>
</page>
</topic>
<topic type="" id="en1405010600">
<title><content-text>How a Standard ACL Works</content-text></title>
<page type="OneColumn" id="en1405010601">
<content-media type="InteractiveGraphicHotspots" id="cm4802758335">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405010000/en1405010600/en1405010601/cm4802758335.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405010000/en1405010600/en1405010601/cm4802758335text.xml"/></content-media>
<content-text><p>A standard ACL is a sequential collection of permit and deny conditions that apply to IP addresses. The destination of the packet and the ports involved are not covered. </p> <p>The decision process is mapped in the figure. Cisco IOS software tests addresses against the conditions one by one. The first match determines whether the software accepts or rejects the address. Because the software stops testing conditions after the first match, the order of the conditions is critical. If no conditions match, the address is rejected.</p> <p>The two main tasks involved in using ACLs are as follows:</p> <p><b>Step 1.</b> Create an access list by specifying an access list number or name and access conditions.</p> <p><b>Step 2.</b> Apply the ACL to interfaces or terminal lines.</p></content-text>
</page>
</topic>
<topic type="" id="en1405010700">
<title><content-text>Numbering and Naming ACLs</content-text></title>
<page type="OneColumn" id="en1405010701">
<content-media type="InteractiveGraphicHotspots" id="cm2565216131">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405010000/en1405010700/en1405010701/cm2565216131.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405010000/en1405010700/en1405010701/cm2565216131text.xml"/></content-media>
<content-text><p>Using numbered ACLs is an effective method for determining the ACL type on smaller networks with more homogeneously defined traffic. However, a number does not inform you of the purpose of the ACL. For this reason, starting with Cisco IOS Release 11.2, you can use a name to identify a Cisco ACL. </p>  <p>The figure summarizes the rule to designate numbered ACLs and named ACLs. </p>  <p>Regarding numbered ACLs, in case you are wondering why numbers 200 to 1299 are skipped, it is because those numbers are used by other protocols. This course focuses only on IP ACLs. For example, numbers 600 to 699 are used by AppleTalk, and numbers 800 to 899 are used by IPX.</p></content-text>
</page>
</topic>
<topic type="" id="en1405010800">
<title><content-text>Where to Place ACLs</content-text></title>
<page type="OneColumn" id="en1405010801">
<content-media type="StaticGraphic" id="cm2020304204">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405010000/en1405010800/en1405010801/cm2020304204.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405010000/en1405010800/en1405010801/cm2020304204text.xml"/></content-media>
<content-text><p>The proper placement of an ACL to filter undesirable traffic makes the network operate more efficiently. ACLs can act as firewalls to filter packets and eliminate unwanted traffic. Where you place ACLs can reduce unnecessary traffic. For example, traffic that will be denied at a remote destination should not use network resources along the route to that destination. </p> <p>Every ACL should be placed where it has the greatest impact on efficiency. The basic rules are:</p> <p><ul><li>Locate extended ACLs as close as possible to the source of the traffic denied. This way, undesirable traffic is filtered without crossing the network infrastructure.</li><li>Because standard ACLs do not specify destination addresses, place them as close to the destination as possible. </li></ul></p> <p>Let us consider an example of where to place ACLs in our network. The interface and network location is based on what you want the ACL to do. </p> <p>In the figure, the administrator wants to prevent traffic originating in the 192.168.10.0/24 network from getting to the 192.168.30.0/24 network. An ACL on the outbound interface of R1 denies R1 the ability to send traffic to other places as well. The solution is to place a standard ACL on the inbound interface of R3 to stop all traffic from the source address192.168.10.0/24. A standard ACL meets the needs because it is only concerned with source IP addresses. </p> <p><b>Click the Extended ACL button in the figure.</b></p> <p>Consider that administrators can only place ACLs on devices that they control. Therefore, placement must be determined in the context of where the control of the network administrator extends. In this figure, the administrator of the 192.168.10.0/24 and 192.168.11.0/24 networks (referred to as Ten and Eleven, respectively, in this example) wants to deny Telnet and FTP traffic from Eleven to the 192.168.30.0/24 network (Thirty, in this example). At the same time, other traffic must be permitted to leave Ten.</p> <p>There are several ways to do this. An extended ACL on R3 blocking Telnet and FTP from Eleven would accomplish the task, but the administrator does not control R3. That solution also still allows unwanted traffic to cross the entire network, only to be blocked at the destination. This affects overall network efficiency. </p> <p>One solution is to use an outbound extended ACL that specifies both source and destination addresses (Ten and Thirty, respectively), and says, "Telnet and FTP traffic from Ten is not allowed to go to Thirty." Place this extended ACL on the outbound S0/0/0 port of R1. </p> <p>A disadvantage of this solution is that traffic from Eleven would also be subject to some processing by the ACL, even though Telnet and FTP traffic is allowed.</p> <p>The better solution is to move closer to the source and place an extended ACL on the inbound Fa0/2 interface of R1. This ensures that packets from Ten do not enter R1, and subsequently cannot cross over into Eleven, or even enter R2 or R3. Traffic with other destination addresses and ports is still permitted through R1. </p></content-text>
</page>
</topic>
<topic type="" id="en1405010900">
<title><content-text>General Guidelines for Creating ACLs</content-text></title>
<page type="OneColumn" id="en1405010901">
<content-media type="StaticGraphic" id="cm2891471269">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405010000/en1405010900/en1405010901/cm2891471269.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405010000/en1405010900/en1405010901/cm2891471269text.xml"/></content-media>
<content-text><p><b>ACL Best Practices</b></p> <p>Using ACLs requires attention to detail and great care. Mistakes can be costly in terms of downtime, troubleshooting efforts, and poor network service. Before starting to configure an ACL, basic planning is required. The figure presents guidelines that form the basis of an ACL best practices list.</p></content-text>
</page>
<page type="FullScreen" id="en1405010902">
<content-media type="ActivityCustom" id="cm8144236397">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405010000/en1405010900/en1405010902/cm8144236397.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405010000/en1405010900/en1405010902/cm8144236397text.xml"/></content-media>
<content-text><p><b>Activity: Using ACLs to Secure Networks</b></p></content-text>
</page>
</topic>
</section>
<section type="" id="en1405020000">
<title><content-text>Configuring Standard ACLs</content-text></title>
<topic type="" id="en1405020100">
<title><content-text>Entering Criteria Statements</content-text></title>
<page type="OneColumn" id="en1405020101">
<content-media type="StaticGraphic" id="cm6276605533">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405020000/en1405020100/en1405020101/cm6276605533.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405020000/en1405020100/en1405020101/cm6276605533text.xml"/></content-media>
<content-text><p>Before beginning to configure a standard ACL, we will review important ACL concepts covered in Section 1. </p>  <p>Recall that when traffic comes into the router, it is compared to ACL statements based on the order that the entries occur in the router. The router continues to process the ACL statements until it has a match. For this reason, you should have the most frequently used ACL entry at the top of the list. If no matches are found when the router reaches the end of the list, the traffic is denied because ACLs have an implied deny for all traffic not meeting any of the tested criteria. A single-entry ACL with only one deny entry has the effect of denying all traffic. You must have at least one permit statement in an ACL or all traffic is blocked. </p>  <p>For example, the two ACLs (101 and 102) in the figure have the same effect. Network 192.168.10.0 would be permitted to access network 192.168.30 while 192.168.11.0 would not be allowed. </p></content-text>
</page>
</topic>
<topic type="" id="en1405020200">
<title><content-text>Configuring a Standard ACL</content-text></title>
<page type="OneColumn" id="en1405020201">
<content-media type="InteractiveGraphicHotspots" id="cm3415638131">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405020000/en1405020200/en1405020201/cm3415638131.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405020000/en1405020200/en1405020201/cm3415638131text.xml"/></content-media>
<content-text><p><b>Standard ACL Logic</b></p> <p>In the figure, packets that come in Fa0/0 are checked for their source addresses:</p> <p><span class="cmd"><b>access-list 2 deny 192.168.10.1</b></span></p> <p><span class="cmd"><b>access-list 2 permit 192.168.10.0 0.0.0.255</b></span></p> <p><span class="cmd"><b>access-list 2 deny 192.168.0.0 0.0.255.255</b></span></p> <p><span class="cmd"><b>access-list 2 permit 192.0.0.0 0.255.255.255</b></span></p> <p>If packets are permitted, they are routed through the router to an output interface. If packets are not permitted, they are dropped at the incoming interface. </p></content-text>
</page>
<page type="OneColumn" id="en1405020202">
<content-media type="InteractiveGraphicHotspots" id="cm8011270740">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405020000/en1405020200/en1405020202/cm8011270740.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405020000/en1405020200/en1405020202/cm8011270740text.xml"/></content-media>
<content-text><p><b>Configuring Standard ACLs</b></p> <p>To configure numbered standard ACLs on a Cisco router, you must first create the standard ACL and then activate the ACL on an interface. </p> <p>The <span class="cmd"><b>access-list</b></span> global configuration command defines a standard ACL with a number in the range of 1 to 99. Cisco IOS Software Release 12.0.1 extended these numbers by allowing 1300 to 1999 to provide a maximum of 798 possible standard ACLs. These additional numbers are referred to as expanded IP ACLs. </p> <p>The full syntax of the standard ACL command is as follows: </p> <p><span class="cmd">Router(config)#<b>access-list</b> <i>access-list-number</i> <b>deny</b> <b>permit remark</b> <i>source</i> [<i>source-wildcard</i>] [<b>log</b>]</span></p> <p>The figure provides a detailed explanation of the syntax for a standard ACL. </p>  <p>For example, to create a numbered ACL designated <b>10</b> that would permit network 192.168.10.0 /24, you would enter: </p>  <p><span class="cmd">R1(config)# <b>access-list 10 permit 192.168.10.0</b></span></p> <p><b>Click the Remove ACL button in the figure. </b></p>  <p>The <span class="cmd"><b>no</b></span> form of this command removes a standard ACL. In the figure, the output of the <span class="cmd"><b>show access-list</b></span> command displays the current ACLs configured on router R1. </p>  <p>To remove the ACL, the global configuration <span class="cmd"><b>no access-list</b></span> command is used. Issuing the <span class="cmd"><b>show access-list</b></span> command confirms that access list 10 has been removed. </p>  <p><b>Click the Remark button in the figure.</b> </p>  <p>Typically, administrators create ACLs and fully understand each the purpose of each statement within the ACL. However, when an ACL is revisited at a later time, it may no longer as obvious as it once was. </p>  <p>The <span class="cmd"><b>remark</b></span> keyword is used for documentation and makes access lists a great deal easier to understand. Each remark is limited to 100 characters. The ACL in the figure, although fairly simple, is used to provide an example. When reviewing the ACL in the configuration, the remark is also displayed. </p>  <p>The next topic explains how to use wildcard masking to identify specific networks and hosts.</p></content-text>
</page>
</topic>
<topic type="" id="en1405020300">
<title><content-text>ACL Wildcard Masking</content-text></title>
<page type="OneColumn" id="en1405020301">
<content-media type="InteractiveGraphicHotspots" id="cm8206635982">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405020000/en1405020300/en1405020301/cm8206635982.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405020000/en1405020300/en1405020301/cm8206635982text.xml"/></content-media>
<content-text><p><b>Wildcard Masking</b></p> <p>ACLs statements include masks, also called <content-link target="{EC64B381-7EEB-4D3C-8BAA-2518364DC220}" type="glossary">wildcard masks</content-link>. A wildcard mask is a string of binary digits telling the router which parts of the subnet number to look at. Although wildcard masks have no functional relationship with subnet masks, they do provide a similar function. The mask determines how much of an IP source or destination address to apply to the address match. The numbers 1 and 0 in the mask identify how to treat the corresponding IP address bits. However, they are used for different purposes and follow different rules. </p>  <p>Wildcard masks and subnet masks are both 32 bits long and use binary 1s and 0s. Subnet masks use binary 1s and 0s to identify the network, subnet, and host portion of an IP address. Wildcard masks use binary 1s and 0s to filter individual or groups of IP addresses to permit or deny access to resources based on an IP address. By carefully setting wildcard masks, you can permit or deny a single or several IP addresses </p>  <p>Wildcard masks and subnet masks differ in the way they match binary 1s and 0s. Wildcard masks use the following rules to match binary 1s and 0s: </p> <p><ul><li>Wildcard mask bit 0 - Match the corresponding bit value in the address </li><li>Wildcard mask bit 1 - Ignore the corresponding bit value in the address</li></ul></p> <p>The figure explains how different wildcard masks filter IP addresses. As you look at the example, remember that binary 0 signifies a match, and that binary 1 signifies ignore. </p>  <p><b>Note:</b> Wildcard masks are often referred to as an inverse mask. The reason is that, unlike a subnet mask in which binary 1 is equal to a match and binary 0 is not a match, the reverse is true. </p> <p><b>Click the Wildcard Mask Example button in the figure</b>.</p>  <p><b>Using a Wildcard Mask</b> </p>  <p>The table in the figure shows the results of applying a 0.0.255.255 wildcard mask to a 32-bit IP address. Remember that a binary 0 indicates a value that is matched. </p></content-text>
</page>
<page type="OneColumn" id="en1405020302">
<content-media type="StaticGraphic" id="cm6167914068">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405020000/en1405020300/en1405020302/cm6167914068.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405020000/en1405020300/en1405020302/cm6167914068text.xml"/></content-media>
<content-text><p><b>Wildcard Masks to Match IP Subnets</b></p> <p>Calculating the wildcard mask can be a little confusing at first. The figure provides three examples of wildcard masks. </p> <p>The first example the wildcard mask stipulates that every bit in the IP 192.168.1.1must match exactly. The wildcard mask is equivalent to the subnet mask 255.255.255.255.</p> <p>In the second example, the wildcard mask stipulates that anything will match. The wildcard mask is equivalent to the subnet mask 0.0.0.0.</p> <p>In the third example, the wildcard mask stipulates that it will match any host within the 192.168.1.0 /24 network. The wildcard mask is equivalent to the subnet mask 255.255.255.0.</p> <p>These examples were fairly simple and straightforward. However, the calculation of wildcard masks can get a little trickier. </p> <p><b>Click the Wildcard Mask 2 button in the figure. </b></p> <p>The two examples in the figure are more complicated than the last three you viewed. In example 1, the first two octets and first four bits of the third octet must match exactly. The last four bits in the third octet and the last octet can be any valid number. This results in a mask that checks for 192.168.16.0 to 192.168.31.0</p> <p>Example 2 shows a wildcard mask that matches the first two octets, and the least significant bit in the third octet. The last octet and the first seven bits in the third octet can be any valid number. The result is a mask that would permit or deny all hosts from odd subnets from the 192.168.0.0 major network.</p> <p>Calculating wildcard masks can be difficult, but you can do it easily by subtracting the subnet mask from 255.255.255.255. </p> <p><b>Click the Example 1 button in the figure.</b></p> <p>For example, assume you wanted to permit access to all users in the 192.168.3.0 network. Because the subnet mask is 255.255.255.0, you could take the 255.255.255.255 and subtract from the subnet mask 255.255.255.0 as is indicated in the figure. The solution produces the wildcard mask 0.0.0.255.</p> <p><b>Click the Example 2 button in the figure.</b></p> <p>Now assume you wanted to permit network access for the 14 users in the subnet 192.168.3.32 /28. The subnet mask for the IP subnet is 255.255.255.240, therefore take the 255.255.255.255 and subtract from the subnet mask 255.255.255.240. The solution this time produces the wildcard mask 0.0.0.15.</p> <p><b>Click the Example 3 button in the figure.</b></p> <p>In this third example, assume you wanted to match only networks 192.168.10.0 and 192.168.11.0. Again, you take the 255.255.255.255 and subtract the regular subnet mask which in this case would be 255.255.252.0. The result is 0.0.3.255.</p> <p>Although you could accomplish the same result with two statements such as:</p> <p><span class="cmd">R1(config)# <b>access-list 10 permit 192.168.10.0</b></span></p> <p><span class="cmd">R1(config)# <b>access-list 10 permit 192.168.11.0</b></span></p> <p>It is far more efficient to configure the wildcard mask such as:</p> <p><span class="cmd">R1(config)# <b>access-list 10 permit 192.168.10.0 0.0.3.255</b></span></p> <p>That may not seem more efficient, but when you consider if you wanted to match network 192.168.16.0 to 192.168.31.0 as follows:</p> <span class="cmd"><p>R1(config)# <b>access-list 10 permit 192.168.16.0</b></p></span> <span class="cmd"><p>R1(config)# <b>access-list 10 permit 192.168.17.0</b></p></span> <span class="cmd"><p>R1(config)# <b>access-list 10 permit 192.168.18.0</b></p></span> <span class="cmd"><p>R1(config)# <b>access-list 10 permit 192.168.19.0</b></p></span> <span class="cmd"><p>R1(config)# <b>access-list 10 permit 192.168.20.0</b></p></span> <span class="cmd"><p>R1(config)# <b>access-list 10 permit 192.168.21.0</b></p></span> <span class="cmd"><p>R1(config)# <b>access-list 10 permit 192.168.22.0</b></p></span> <span class="cmd"><p>R1(config)# <b>access-list 10 permit 192.168.23.0</b></p></span> <span class="cmd"><p>R1(config)# <b>access-list 10 permit 192.168.24.0</b></p></span> <span class="cmd"><p>R1(config)# <b>access-list 10 permit 192.168.25.0</b></p></span> <span class="cmd"><p>R1(config)# <b>access-list 10 permit 192.168.26.0</b></p></span> <span class="cmd"><p>R1(config)# <b>access-list 10 permit 192.168.27.0</b></p></span> <span class="cmd"><p>R1(config)# <b>access-list 10 permit 192.168.28.0</b></p></span> <span class="cmd"><p>R1(config)# <b>access-list 10 permit 192.168.29.0</b></p></span> <span class="cmd"><p>R1(config)# <b>access-list 10 permit 192.168.30.0</b></p></span> <span class="cmd"><p>R1(config)# <b>access-list 10 permit 192.168.31.0</b></p></span> <p>You can see that configuring the following wildcard mask makes it far more efficient:</p> <p><span class="cmd">R1(config)# <b>access-list 10 permit 192.168.16.0 0.0.15.255</b></span></p></content-text>
</page>
<page type="OneColumn" id="en1405020303">
<content-media type="StaticGraphic" id="cm7283882959">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405020000/en1405020300/en1405020303/cm7283882959.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405020000/en1405020300/en1405020303/cm7283882959text.xml"/></content-media>
<content-text><p><b>Wildcard Bit Mask Keywords</b></p> <p>Working with decimal representations of binary wildcard mask bits can be tedious. To simplify this task, the keywords <span class="cmd"><b>host</b></span> and <span class="cmd"><b>any</b></span> help identify the most common uses of wildcard masking. These keywords eliminate entering wildcard masks when identifying a specific host or network. They also make it easier to read an ACL by providing visual clues as to the source or destination of the criteria.</p>  <p><ul><li>The <span class="cmd"><b>host</b></span> option substitutes for the 0.0.0.0 mask. This mask states that all IP address bits must match or only one host is matched.</li><li>The <span class="cmd"><b>any</b></span> option substitutes for the IP address and 255.255.255.255 mask. This mask says to ignore the entire IP address or to accept any addresses. </li></ul></p> <p><b>Example 1: Wildcard Masking Process with a Single IP Address</b></p> <p>In the example, instead of entering <span class="cmd"><b>192.168.10.10 0.0.0.0</b></span>, you can use <span class="cmd"><b>host 192.168.10.10</b></span>. </p>  <p><b>Example 2: Wildcard Masking Process with a Match Any IP Address</b></p> <p>In the example, instead of entering <span class="cmd"><b>0.0.0.0 255.255.255.255</b></span>, you can use the keyword <span class="cmd"><b>any</b></span> by itself.</p></content-text>
</page>
<page type="OneColumn" id="en1405020304">
<content-media type="StaticGraphic" id="cm7509972350">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405020000/en1405020300/en1405020304/cm7509972350.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405020000/en1405020300/en1405020304/cm7509972350text.xml"/></content-media>
<content-text><p><b>The any and host Keywords</b></p> <p>In this figure, we have two examples. Example 1 is displaying how to use the <span class="cmd"><b>any</b></span> option to substitute 0.0.0.0 for the IP address with a wildcard mask of 255.255.255.255.</p> <p>Example 2 is displaying how to use the <span class="cmd"><b>host</b></span> option to substitute the wildcard mask.</p></content-text>
</page>
</topic>
<topic type="" id="en1405020400">
<title><content-text>Applying Standard ACLs to Interfaces</content-text></title>
<page type="OneColumn" id="en1405020401">
<content-media type="InteractiveGraphicHotspots" id="cm9702332224">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405020000/en1405020400/en1405020401/cm9702332224.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405020000/en1405020400/en1405020401/cm9702332224text.xml"/></content-media>
<content-text><p><b>Standard ACL Configuration Procedures</b></p> <p>After a standard ACL is configured, it is linked to an interface using the <span class="cmd"><b>ip access-group</b></span> command: </p> <p><span class="cmd">Router(config-if)#<b>ip access-group</b> {<i>access-list-number</i> | <i>access-list-name</i>} {<b>in</b> | <b>out</b>}</span></p> <p>To remove an ACL from an interface, first enter the <span class="cmd"><b>no ip access-group</b></span> command on the interface, and then enter the global <span class="cmd"><b>no access-list</b></span> command to remove the entire ACL.</p> <p>The figure lists the steps and syntax to configure and apply a numbered standard ACL on a router. </p> <p><b>Click the Example 1 button in the figure </b>for an example of an ACL to permit a single network.</p> <p>This ACL allows only traffic from source network 192.168.10.0 to be forwarded out on S0/0/0. Traffic from networks other than 192.168.10.0 is blocked. </p> <p>The first line identifies the ACL as access list 1. It permits traffic that matches the selected parameters. In this case, the IP address and wildcard mask identifying the source network is 192.168.10.0 0.0.0.255. Recall that there is an unseen implicit deny all statement that is equivalent to adding the line <span class="cmd"><b>access-list 1 deny 0.0.0.0 255.255.255.255</b></span>. </p> <p>The <span class="cmd"><b>ip access-group 1 out</b></span> interface configuration command links and ties ACL 1 to the Serial 0/0/0 interface as an outbound filter.</p> <p>Therefore, ACL 1 only permits hosts from the 192.168.10.0 /24 network to exit router R1. It denies any other network including the 192.168.11.0 network. </p> <p><b>Click the Example 2 button in the figure </b>for an example of an ACL that denies a specific host.</p> <p>This ACL replaces the previous example, but also blocks traffic from a specific address. The first command deletes the previous version of ACL 1. The next ACL statement, denies the PC1 host located at 192.168.10.10. Every other host on the 192.168.10.0 /24 network is permitted. Again the implicit deny statement matches every other network.</p> <p>The ACL is again reapplied to interface S0/0/0 in an outbound direction.</p> <p><b>Click the Example 3 button in the figure </b>for an example of an ACL that denies a specific subnet.</p> <p>This ACL replaces the previous example but still blocks traffic from the host PC1. It also permits all other LAN traffic to exit from router R1. </p> <p>The first two commands are the same as the previous example. The first command deletes the previous version of ACL 1 and the next ACL statement denies the PC1 host located at 192.168.10.10. </p> <p>The third line is new and permits all hosts from the 192.168.x.x /16 networks. This now means that all hosts from the 192.168.10.0 /24 network still match but now the hosts from the 192.168.11.0 network also match. </p> <p>The ACL is again reapplied to interface S0/0/0 in an outbound direction. Therefore, both LANs attached to router R1 may exit the S0/0/0 interface with the exception of the PC1 host.</p></content-text>
</page>
<page type="OneColumn" id="en1405020402">
<content-media type="InteractiveGraphicHotspots" id="cm8801288441">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405020000/en1405020400/en1405020402/cm8801288441.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405020000/en1405020400/en1405020402/cm8801288441text.xml"/></content-media>
<content-text><p><b>Using an ACL to Control VTY Access</b></p> <p>Cisco recommends using SSH for administrative connections to routers and switches. If the Cisco IOS software image on your router does not support SSH, you can partially improve the security of administrative lines by restricting VTY access. Restricting VTY access is a technique that allows you to define which IP addresses are allowed Telnet access to the router EXEC process. You can control which administrative workstation or network manages your router with an ACL and an <span class="cmd"><b>access-class</b></span> statement to your VTY lines. You can also use this technique with SSH to further improve administrative access security.</p> <p>The <span class="cmd"><b>access-class</b></span> command in line configuration mode restricts incoming and outgoing connections between a particular VTY (into a Cisco device) and the addresses in an access list. </p> <p>Standard and extended access lists apply to packets that travel through a router. They are not designed to block packets that originate within the router. An outbound Telnet extended ACL does not prevent router-initiated Telnet sessions, by default. </p> <p>Filtering Telnet traffic is typically considered an extended IP ACL function because it filters a higher level protocol. However, because you are using the <span class="cmd"><b>access-class</b></span> command to filter incoming or outgoing Telnet sessions by source address and apply filtering to VTY lines, you can use standard ACL statements to control VTY access.</p> <p>The command syntax of the access-class command is:</p> <p><span class="cmd"><b>access-class</b> <i>access-list-number</i> {<b>in</b> [<b>vrf-also</b>] | <b>out</b>}</span></p> <p>The parameter <span class="cmd"><b>in</b></span> restricts incoming connections between a particular Cisco device and the addresses in the access list, while the parameter <span class="cmd"><b>out</b></span> restricts outgoing connections between a particular Cisco device and the addresses in the access list. </p> <p>An example allowing VTY 0 and 4 is shown in the figure. For example, the ACL in the figure is configured to permit networks 192.168.10.0 and 192.168.11.0 access to VTYs 0 - 4. All other networks are denied access to the VTYs.</p> <p>The following should be considered when configuring access lists on VTYs:</p> <p><ul><li>Only numbered access lists can be applied to VTYs. </li><li>Identical restrictions should be set on all the VTYs, because a user can attempt to connect to any of them. </li></ul></p></content-text>
</page>
</topic>
<topic type="" id="en1405020500">
<title><content-text>Editing Numbered ACLs</content-text></title>
<page type="OneColumn" id="en1405020501">
<content-media type="StaticGraphic" id="cm4281828616">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405020000/en1405020500/en1405020501/cm4281828616.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405020000/en1405020500/en1405020501/cm4281828616text.xml"/></content-media>
<content-text><p><b>Editing Numbered ACLs</b></p> <p>When configuring an ACL, the statements are added in the order that they are entered at the end of the ACL. However, there is no built-in editing feature that allows you to edit a change in an ACL. You cannot selectively insert or delete lines. </p> <p>It is strongly recommended that any ACL be constructed in a text editor such as Microsoft Notepad. This allows you to create or edit the ACL and then paste it onto the router. For an existing ACL, you could use the <span class="cmd"><b>show running-config</b></span> command to display the ACL, copy and paste it into the text editor, make the necessary changes, and reload it. </p> <p>For example, assume that the host IP address in the figure was incorrectly entered. Instead of the 192.168.10.100 host, it should have been the 192.168.10.11 host. Here are the steps to edit and correct ACL 20:</p> <p><b>Step 1.</b> Display the ACL using the <span class="cmd"><b>show running-config</b></span> command. The example in the figure uses the <span class="cmd"><b>include</b></span> keyword to display only the ACL statements.</p> <p><b>Step 2.</b> Highlight the ACL, copy it, and then paste it into Microsoft Notepad. Edit the list as required. Once the ACL is correctly displayed in Microsoft Notepad, highlight it and copy it. </p> <p><b>Step 3.</b> In global configuration mode, disable the access list using the <span class="cmd"><b>no access-list 20</b></span> command. Otherwise, the new statements would be appended to the existing ACL. Then paste the new ACL into the configuration of the router.</p> <p>It should be mentioned that when using the <span class="cmd"><b>no access-list</b></span> command, no ACL is protecting your network. Also, be aware that if you make an error in the new list, you have to disable it and troubleshoot the problem. In that case, again, your network has no ACL during the correction process. </p></content-text>
</page>
<page type="OneColumn" id="en1405020502">
<content-media type="StaticGraphic" id="cm3166620168">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405020000/en1405020500/en1405020502/cm3166620168.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405020000/en1405020500/en1405020502/cm3166620168text.xml"/></content-media>
<content-text><p><b>Commenting ACLs</b></p> <p>You can use the <span class="cmd"><b>remark</b></span> keyword to include comments (remarks) about entries in any IP standard or extended ACL. The remarks make the ACL easier for you to understand and scan. Each remark line is limited to 100 characters.</p> <p>The remark can go before or after a <span class="cmd"><b>permit</b></span> or <span class="cmd"><b>deny</b></span> statement. You should be consistent about where you put the remark so that it is clear which remark describes which <span class="cmd"><b>permit</b></span> or <span class="cmd"><b>deny</b></span> statement. For example, it would be confusing to have some remarks before the associated <span class="cmd"><b>permit</b></span> or <span class="cmd"><b>deny</b></span> statements and some remarks after.</p> <p>To include a comment for IP numbered standard or extended ACLs, use the <span class="cmd"><b>access-list </b><i>access-list number</i><b> remark </b><i>remark</i></span> global configuration command. To remove the remark, use the <span class="cmd"><b>no</b></span> form of this command.</p> <p>In the first example, the standard ACL allows access to the workstation that belongs to Jones, and denies access to the workstation that belongs to Smith.</p> <p>For an entry in a named ACL, use the <span class="cmd"><b>remark access-list</b></span> configuration command. To remove the remark, use the <span class="cmd"><b>no</b></span> form of this command. The second example shows an extended named ACL. Recall from the earlier definition of extended ACLs that they are used to control specific port numbers or services. In the second example, the remark says that the subnet for Jones is not allowed to use outbound Telnet.</p></content-text>
</page>
</topic>
<topic type="" id="en1405020600">
<title><content-text>Creating Standard Named ACLs</content-text></title>
<page type="OneColumn" id="en1405020601">
<content-media type="StaticGraphic" id="cm3069019443">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405020000/en1405020600/en1405020601/cm3069019443.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405020000/en1405020600/en1405020601/cm3069019443text.xml"/></content-media>
<content-text><p>Naming an ACL makes it easier to understand its function. For example, an ACL to deny FTP could be called NO_FTP. When you identify your ACL with a name instead of with a number, the configuration mode and command syntax are slightly different.</p> <p>The figure shows the steps to create a standard named ACL.</p> <p><b>Step 1.</b> Starting from the global configuration mode, use the <span class="cmd"><b>ip access-list</b></span> command to create a named ACL. ACL names are alphanumeric, must be unique and must not begin with a number.</p> <p><b>Step 2.</b> From the named ACL configuration mode, use the <span class="cmd"><b>permit</b></span> or <span class="cmd"><b>deny</b></span>statements to specify one or more conditions for determining if a packet is forwarded or dropped.</p> <p><b>Step 3.</b> Return to privileged EXEC mode with the <span class="cmd"><b>end</b></span> command.</p> <p><b>Click the Example button in the figure.</b></p> <p>In the figure, the screen output shows the commands used to configure a standard named ACL on router R1, interface Fa0/0 that denies host 192.168.11.10 access to the 192.168.10.0 network. </p> <p>Capitalizing ACL names is not required, but makes them stand out when viewing the running-config output.</p></content-text>
</page>
</topic>
<topic type="" id="en1405020700">
<title><content-text>Monitoring and Verifying ACLs</content-text></title>
<page type="OneColumn" id="en1405020701">
<content-media type="InteractiveGraphicHotspots" id="cm6736343230">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405020000/en1405020700/en1405020701/cm6736343230.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405020000/en1405020700/en1405020701/cm6736343230text.xml"/></content-media>
<content-text><p>When you finish an ACL configuration, use Cisco IOS <span class="cmd"><b>show</b></span> commands to verify the configuration. In the figure the top example shows the Cisco IOS syntax to display the contents of all ACLs. The bottom example shows the result of issuing the <span class="cmd"><b>show access-lists</b></span> command on router R1. The capitalized ACL names, SALES and ENG stand out in the screen output.</p> <p>Recall why you started configuring ACLs in the first place; you wanted to implement your organization's security policies. Now that you have verified that the ACLs are configured as you intended, the next step is to confirm that the ACLs work as planned.</p> <p>The guidelines discussed earlier in this section, suggest that you configure ACLs on a test network and then implement the tested ACLs on the production network. Though a discussion on how to prepare an ACL test scenario is beyond the scope of this course, you need to know that confirming your ACLs work as planned can be a complex and time consuming process.</p></content-text>
</page>
</topic>
<topic type="" id="en1405020800">
<title><content-text>Editing Named ACLs</content-text></title>
<page type="OneColumn" id="en1405020801">
<content-media type="StaticGraphic" id="cm1192848608">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405020000/en1405020800/en1405020801/cm1192848608.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405020000/en1405020800/en1405020801/cm1192848608text.xml"/></content-media>
<content-text><p>Named ACLs have a big advantage over numbered ACLs in that they are easier to edit. Starting with Cisco IOS Software Release 12.3, named IP ACLs allow you to delete individual entries in a specific ACL. You can use sequence numbers to insert statements anywhere in the named ACL. If you are using an earlier Cisco IOS software version, you can add statements only at the bottom of the named ACL. Because you can delete individual entries, you can modify your ACL without having to delete and then reconfigure the entire ACL.</p> <p>The example in the figure shows an ACL applied to the S0/0/0 interface of R1. It restricted access to the web server. Looking at this example, you can see two things you have not yet seen in this course:</p> <p><b>Click the Router Output button in the figure.</b></p> <p><ul><li>In the first <span class="cmd"><b>show</b></span> command output, you can see that the ACL named WEBSERVER has three numbered lines indicating access rules for the webserver. </li><li>To grant another workstation access in the list only requires inserting a numbered line. In the example, the workstation with the IP address 192.168.10.15 is being added.</li><li>The final <span class="cmd"><b>show</b></span> command output verifies that the new workstation is now allowed access.</li></ul></p></content-text>
</page>
<page type="OneColumn" id="en1405020802">
<content-media type="ActivityPKA" id="cm7048713311">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405020000/en1405020800/en1405020802/cm7048713311/" mime="application/packettracer" scale="true" type="directory" width="0" height="0" external="en1405000000/en1405020000/en1405020800/en1405020802/cm7048713311/icontext.xml"/></content-media>
<content-text><p>Standard ACLs are router configuration scripts that control whether a router permits or denies packets based on the source address. This activity focuses on defining filtering criteria, configuring standard ACLs, applying ACLs to router interfaces, and verifying and testing the ACL implementation.</p> <p>Detailed instructions are provided within the activity as well as in the PDF link below.</p> <p><content-link target="E4_PTAct_5_2_8.pdf" type="internalfile">Activity Instructions (PDF)</content-link></p> <p><b>Click the Packet Tracer icon for more details.</b></p></content-text>
</page>
</topic>
</section>
<section type="" id="en1405030000">
<title><content-text>Configuring Extended ACLs</content-text></title>
<topic type="" id="en1405030100">
<title><content-text>Extended ACLs</content-text></title>
<page type="OneColumn" id="en1405030101">
<content-media type="StaticGraphic" id="cm6238261633">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405030000/en1405030100/en1405030101/cm6238261633.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405030000/en1405030100/en1405030101/cm6238261633text.xml"/></content-media>
<content-text><p><b>Testing Packets with Extended ACLs</b></p> <p>For more precise traffic-filtering control, you can use extended ACLs numbered 100 to 199 and 2000 to 2699 providing a total of 799 possible extended ACLs. Extended ACLs can also be named. </p> <p>Extended ACLs are used more often than standard ACLs because they provide a greater range of control and, therefore, add to your security solution. Like standard ACLs, extended ACLs check the source packet addresses, but they also check the destination address, protocols and port numbers (or services). This gives a greater range of criteria on which to base the ACL. For example, an extended ACL can simultaneously allow e-mail traffic from a network to a specific destination while denying file transfers and web browsing. </p> <p>The figure shows the logical decision path used by an extended ACL built to filter on source and destination addresses, and protocol and port numbers. In this example, the ACL first filters on the source address, then on the port and protocol of the source. It then filters on the destination address, then on the port and protocol of the destination, and makes a final permit-deny decision. </p> <p>Recall that entries in ACLs are processed one after the other, so a 'No' decision does not necessarily equal a 'Deny'. As you go through the logical decision path, note that a 'No' means go to the next entry until all the entries have been tested. Only when all the entries have been processed is the 'Permit' or 'Deny' decision finalized.</p> <p>The next page provides an example of an extended ACL.</p></content-text>
</page>
<page type="OneColumn" id="en1405030102">
<content-media type="StaticGraphic" id="cm5690109249">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405030000/en1405030100/en1405030102/cm5690109249.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405030000/en1405030100/en1405030102/cm5690109249text.xml"/></content-media>
<content-text><p><b>Testing for Ports and Services</b></p> <p>The ability to filter on protocol and port number allows you to build very specific extended ACLs. Using the appropriate port number, you can specify an application by configuring either the port number or the name of a well-known port. </p> <p>The figure shows some examples of how an administrator specifies a TCP or UDP port number by placing it at the end of the extended ACL statement. Logical operations can be used, such as equal (eq), not equal (neq), greater than (gt), and less than (lt). </p> <p><b>Click the Port Numbers button in the figure.</b></p> <p>The figure shows how to generate a list of port numbers and keywords you can use while building an ACL using the <span class="cmd"><b>R1(config)#access-list 101 permit tcp any eq ?</b></span> command.</p></content-text>
</page>
</topic>
<topic type="" id="en1405030200">
<title><content-text>Configuring Extended ACLs</content-text></title>
<page type="OneColumn" id="en1405030201">
<content-media type="StaticGraphic" id="cm2360478292">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405030000/en1405030200/en1405030201/cm2360478292.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405030000/en1405030200/en1405030201/cm2360478292text.xml"/></content-media>
<content-text><p>The procedural steps for configuring extended ACLs are the same as for standard ACLs-you first create the extended ACL and then activate it on an interface. However, the command syntax and parameters are more complex to support the additional features provided by extended ACLs. </p> <p>The figure shows the common command syntax for extended ACLs. The scrolling field provides details for the keywords and parameters. As you work through this chapter, there are explanations and examples that will further your comprehension. </p> <p><b>Click the Configuring Extended ACLs button in the figure.</b></p> <p>The figure shows an example of how you might create an extended ACL specific to your network needs. In this example, the network administrator needs to restrict Internet access to allow only website browsing. ACL 103 applies to traffic leaving the 192.168.10.0 network, and ACL 104 to traffic coming into the network. </p> <p>ACL 103 accomplishes the first part of the requirement. It allows traffic coming from any address on the 192.168.10.0 network to go to any destination, subject to the limitation that traffic goes to ports 80 (HTTP) and 443 (HTTPS) only.</p> <p>The nature of HTTP requires that traffic flow back into the network, but the network administrator wants to restrict that traffic to HTTP exchanges from requested websites. The security solution must deny any other traffic coming into the network. ACL 104 does that by blocking all incoming traffic, except for the established connections. HTTP establishes connections starting with the original request and then through the exchange of ACK, FIN, and SYN messages. </p> <p>Notice that the example uses the <span class="cmd"><b>established</b></span> parameter. </p> <p>This parameter allows responses to traffic that originates from the 192.168.10.0 /24 network to return inbound on the s0/0/0. A match occurs if the TCP datagram has the ACK or reset (RST) bits set, which indicates that the packet belongs to an existing connection. Without the <span class="cmd"><b>established</b></span> parameter in the ACL statement, clients could send traffic to a web server, but would not receive traffic from the web server.</p></content-text>
</page>
</topic>
<topic type="" id="en1405030300">
<title><content-text>Applying Extended ACLs to Interfaces</content-text></title>
<page type="OneColumn" id="en1405030301">
<content-media type="StaticGraphic" id="cm1466341838">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405030000/en1405030300/en1405030301/cm1466341838.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405030000/en1405030300/en1405030301/cm1466341838text.xml"/></content-media>
<content-text><p>Let us learn how to configure an extended access list by building on the previous example. Recall that we want to allow users to browse both insecure and secure websites. First consider whether the traffic you want to filter is going in or out. Trying to access websites on the Internet is traffic going out. Receiving e-mails from the Internet is traffic coming into the business. However, when considering how to apply an ACL to an interface, in and out take on different meanings depending on the point of view. </p> <p>In the example in the figure, R1 has two interfaces. It has a serial port, S0/0/0, and a Fast Ethernet port, Fa0/0. The Internet traffic coming in is going in the S0/0/0 interface, but is going out the Fa0/0 interface to reach PC1. The example applies the ACL to the serial interface in both directions.</p> <p><b>Click the Deny FTP button in the figure.</b></p> <p>This is an example of denying FTP traffic from subnet 192.168.11.0 going to subnet 192.168.10.0, but permitting all other traffic. Note the use of wildcard masks and the explicit deny all. Remember that FTP requires ports 20 and 21, therefore you need to specify both <span class="cmd"><b>eq 20</b></span> and <span class="cmd"><b>eq 21</b></span> to deny FTP.</p> <p>With extended ACLs, you can choose to use port numbers as in the example, or to call out a well-known port by name. In an earlier example of an extended ACL, the statements were written as follows:</p> <p><span class="cmd"><b>access-list 114 permit tcp 192.168.20.0 0.0.0.255 any eq ftp</b></span></p> <p><span class="cmd"><b>access-list 114 permit tcp 192.168.20.0 0.0.0.255 any eq ftp-data</b></span></p> <p>Note that for FTP, both <span class="cmd"><b>ftp</b></span> and <span class="cmd"><b>ftp-data</b></span> need to be mentioned. </p> <p><b>Click the Deny Telnet button in the figure.</b></p> <p>This example denies Telnet traffic from 192.168.11.0 going out interface Fa0/0, but allows all other IP traffic from any other source to any destination out Fa0/0. Note the use of the <span class="cmd"><b>any</b></span> keywords, meaning from anywhere going to anywhere.</p></content-text>
</page>
</topic>
<topic type="" id="en1405030400">
<title><content-text>Creating Named Extended ACLs</content-text></title>
<page type="OneColumn" id="en1405030401">
<content-media type="StaticGraphic" id="cm7153995744">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405030000/en1405030400/en1405030401/cm7153995744.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405030000/en1405030400/en1405030401/cm7153995744text.xml"/></content-media>
<content-text><p>You can create named extended ACLs in essentially the same way you created named standard ACLs. The commands to create a named ACL are different for standard and extended ACLs.</p> <p>Beginning in privileged EXEC mode, follow these steps to create an extended ACL using names.</p> <p><b>Step 1.</b> Starting in the global configuration mode, use the <span class="cmd"><b>ip access-list extended</b> <i>name</i></span> command to define a named extended ACL. </p> <p><b>Step 2.</b> In named ACL configuration mode, specify the conditions you want to allow or deny.</p> <p><b>Step 3.</b> Return to privileged EXEC mode and verify your ACL with the <span class="cmd"><b>show access-lists</b> [<i>number</i> | <i>name</i>]</span> command.</p> <p><b>Step 4.</b> As an option and recommended step, save your entries in the configuration file with the <span class="cmd"><b>copy running-config startup-config</b></span> command.</p> <p>To remove a named extended ACL, use the <span class="cmd"><b>no ip access-list extended </b><i>name</i></span> global configuration command.</p> <p>The figure shows the named version of the ACL you created earlier.</p></content-text>
</page>
<page type="OneColumn" id="en1405030402">
<content-media type="ActivityPKA" id="cm3778528024">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405030000/en1405030400/en1405030402/cm3778528024/" mime="application/packettracer" scale="true" type="directory" width="0" height="0" external="en1405000000/en1405030000/en1405030400/en1405030402/cm3778528024/icontext.xml"/></content-media>
<content-text><p>Extended ACLs are router configuration scripts that control whether a router permits or denies packets based on their source or destination address as well as protocols or ports. Extended ACLs provide more flexibility and granularity than standard ACLs. This activity focuses on defining filtering criteria, configuring extended ACLs, applying ACLs to router interfaces, and verifying and testing the ACL implementation.</p> <p>Detailed instructions are provided within the activity as well as in the PDF link below.</p> <p><content-link target="E4_PTAct_5_3_4.pdf" type="internalfile">Activity Instructions (PDF)</content-link></p> <p><b>Click the Packet Tracer icon for more details.</b></p></content-text>
</page>
</topic>
</section>
<section type="" id="en1405040000">
<title><content-text>Configure Complex ACLs</content-text></title>
<topic type="" id="en1405040100">
<title><content-text>What are Complex ACLs?</content-text></title>
<page type="OneColumn" id="en1405040101">
<content-media type="StaticGraphic" id="cm3547853820">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405040000/en1405040100/en1405040101/cm3547853820.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405040000/en1405040100/en1405040101/cm3547853820text.xml"/></content-media>
<content-text><p><b>Types of Complex ACLs</b></p> <p>Standard and extended ACLs can become the basis for complex ACLs that provide additional functionality. The table in the figure summarizes the three categories of complex ACLs.</p></content-text>
</page>
</topic>
<topic type="" id="en1405040200">
<title><content-text>Dynamic ACLs</content-text></title>
<page type="OneColumn" id="en1405040201">
<content-media type="StaticGraphic" id="cm6192297488">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405040000/en1405040200/en1405040201/cm6192297488.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405040000/en1405040200/en1405040201/cm6192297488text.xml"/></content-media>
<content-text><p><b>What are Dynamic ACLs?</b></p> <p>Lock-and-key is a traffic filtering security feature that uses dynamic ACLs, which are sometimes referred to as lock-and-key ACLs. Lock-and-key is available for IP traffic only. Dynamic ACLs are dependent on Telnet connectivity, authentication (local or remote), and extended ACLs.</p> <p>Dynamic ACL configuration starts with the application of an extended ACL to block traffic through the router. Users who want to traverse the router are blocked by the extended ACL until they use Telnet to connect to the router and are authenticated. The Telnet connection is then dropped, and a single-entry dynamic ACL is added to the extended ACL that exists. This permits traffic for a particular period; idle and absolute timeouts are possible. </p> <p><b>When to Use Dynamic ACLs </b></p> <p>Some common reasons to use dynamic ACLs are as follows:</p> <p><ul><li>When you want a specific remote user or group of remote users to access a host within your network, connecting from their remote hosts via the Internet. Lock-and-key authenticates the user and then permits limited access through your firewall router for a host or subnet for a finite period. </li><li>When you want a subset of hosts on a local network to access a host on a remote network that is protected by a firewall. With lock-and-key, you can enable access to the remote host only for the desired set of local hosts. Lock-and-key requires the users to authenticate through a <content-link target="{66C17097-1FF6-4E87-814F-9070BF6EB051}" type="glossary">AAA</content-link>, TACACS+ server, or other security server before it allows their hosts to access the remote hosts.</li></ul></p> <p><b>Benefits of Dynamic ACLs </b></p> <p>Dynamic ACLs have the following security benefits over standard and static extended ACLs:</p> <p><ul><li>Use of a challenge mechanism to authenticate individual users</li><li>Simplified management in large internetworks</li><li>In many cases, reduction of the amount of router processing that is required for ACLs</li><li>Reduction of the opportunity for network break-ins by network hackers</li><li>Creation of dynamic user access through a firewall, without compromising other configured security restrictions</li></ul></p> <p>In the figure the user at PC1 is an administrator that requires a back door access to the 192.168.30.0 /24 network located on router R3. A dynamic ACL has been configured to allow FTP and HTTP on router R3 access but only for a limited time.</p></content-text>
</page>
<page type="OneColumn" id="en1405040202">
<content-media type="StaticGraphic" id="cm1730026134">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405040000/en1405040200/en1405040202/cm1730026134.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405040000/en1405040200/en1405040202/cm1730026134text.xml"/></content-media>
<content-text><p><b>Dynamic ACL Examples</b></p> <p>Consider a requirement for a network administrator on PC1 to gain periodic access to the network (192.168.30.0 /24) through router R3. To facilitate this requirement a dynamic ACL is configured on the serial interface S0/0/1 on router R3. </p> <p>Although a detailed description of the configuration for a dynamic ACL is outside the scope of this course, it is useful to review the configuration steps. </p> <p> </p> <p><b>Click the Config button in the figure </b>to view an example of a dynamic ACL configuration. </p> <p><b>Rollover each Step in the figure</b> to review the dynamic ACL configuration steps.</p></content-text>
</page>
</topic>
<topic type="" id="en1405040300">
<title><content-text>Reflexive ACLs</content-text></title>
<page type="OneColumn" id="en1405040301">
<content-media type="StaticGraphic" id="cm8961945188">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405040000/en1405040300/en1405040301/cm8961945188.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405040000/en1405040300/en1405040301/cm8961945188text.xml"/></content-media>
<content-text><p><b>What are Reflexive ACLs?</b></p> <p>Reflexive ACLs force the reply traffic from the destination of a known recent outbound packet to go to the source of that outbound packet. This adds greater control to what traffic you allow into your network and increases the capabilities of extended access lists.</p> <p>Network administrators use reflexive ACLs to allow IP traffic for sessions originating from their network while denying IP traffic for sessions originating outside the network. These ACLs allow the router to manage session traffic dynamically. The router examines the outbound traffic and when it sees a new connection, it adds an entry to a temporary ACL to allow replies back in. Reflexive ACLs contain only temporary entries. These entries are automatically created when a new IP session begins, for example, with an outbound packet, and the entries are automatically removed when the session ends. </p> <p>Reflexive ACLs provide a truer form of session filtering than an extended ACL that uses the <span class="cmd"><b>established</b></span> parameter introduced earlier. Although similar in concept to the <span class="cmd"><b>established</b></span> parameter, reflexive ACLs also work for UDP andICMP, which have no ACK or RST bits. The <span class="cmd"><b>established</b></span> option also does not work with applications that dynamically alter the source port for the session traffic. The <span class="cmd"><b>permit established</b></span> statement only checks ACK and RST bits-not source and destination address.</p> <p>Reflexive ACLs are not applied directly to an interface but are "nested" within an extended named IP ACL that is applied to the interface.</p> <p>Reflexive ACLs can be defined only with extended named IP ACLs. They cannot be defined with numbered or standard named ACLs or with other protocol ACLs. Reflexive ACLs can be used with other standard and static extended ACLs.</p> <p><b>Benefits of Reflexive ACLs</b></p> <p>Reflexive ACLs have the following benefits:</p> <p><ul><li>Help secure your network against network hackers and can be included in a firewall defense. </li><li>Provide a level of security against spoofing and certain DoS attacks. Reflexive ACLs are much harder to spoof because more filter criteria must match before a packet is permitted through. For example, source and destination addresses and port numbers, not just ACK and RST bits, are checked.</li><li>Simple to use and, compared to basic ACLs, provide greater control over which packets enter your network.</li></ul></p></content-text>
</page>
<page type="OneColumn" id="en1405040302">
<content-media type="StaticGraphic" id="cm7697540152">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405040000/en1405040300/en1405040302/cm7697540152.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405040000/en1405040300/en1405040302/cm7697540152text.xml"/></content-media>
<content-text><p><b>Reflexive ACL Example</b></p> <p>The figure shows an example for which the administrator needs a reflexive ACL that permits ICMP outbound and inbound traffic, while it permits only TCP traffic that has been initiated from inside the network. Assume that all other traffic will be denied. The reflexive ACL is applied to the outbound interface of R2. </p> <p><b>Click the Config button in the figure.</b></p> <p>Although the complete configuration for reflexive ACLs is outside the scope of this course, the figure shows an example of the steps that are required to configure a reflexive ACL.</p> <p><b>Rollover each Step in the figure</b> to review the reflexive ACL configuration steps.</p></content-text>
</page>
</topic>
<topic type="" id="en1405040400">
<title><content-text>Time-based ACLs</content-text></title>
<page type="OneColumn" id="en1405040401">
<content-media type="StaticGraphic" id="cm5060973014">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405040000/en1405040400/en1405040401/cm5060973014.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405040000/en1405040400/en1405040401/cm5060973014text.xml"/></content-media>
<content-text><p><b>What are Time-based ACLs?</b></p> <p>Time-based ACLs are similar to extended ACLs in function, but they allow for access control based on time. To implement time-based ACLs, you create a time range that defines specific times of the day and week. You identify the time range with a name and then refer to it by a function. The time restrictions are imposed on the function itself.</p> <p>Time-based ACLs have many benefits, such as:</p> <p><ul><li>Offers the network administrator more control over permitting or denying access to resources. </li><li>Allows network administrators to control logging messages. ACL entries can log traffic at certain times of the day, but not constantly. Therefore, administrators can simply deny access without analyzing the many logs that are generated during peak hours.</li></ul></p></content-text>
</page>
<page type="OneColumn" id="en1405040402">
<content-media type="StaticGraphic" id="cm9688194350">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405040000/en1405040400/en1405040402/cm9688194350.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405040000/en1405040400/en1405040402/cm9688194350text.xml"/></content-media>
<content-text><p><b>Time Based ACL Example</b></p> <p>Although the complete configuration details for time-based ACLs are outside the scope of this course, the following example shows the steps that are required. In the example, a Telnet connection is permitted from the inside network to the outside network on Monday, Wednesday, and Friday during business hours. </p> <p><b>Click the Config button in the figure.</b></p> <p><b>Step 1.</b> Define the time range to implement the ACL and give it a name-EVERYOTHERDAY, in this case.</p> <p><b>Step 2.</b> Apply the time range to the ACL.</p> <p><b>Step 3.</b> Apply the ACL to the interface.</p> <p>The time range relies on the router system clock. The feature works best with Network Time Protocol (NTP) synchronization, but the router clock can be used.</p></content-text>
</page>
</topic>
<topic type="" id="en1405040500">
<title><content-text>Troubleshooting Common ACL Errors</content-text></title>
<page type="OneColumn" id="en1405040501">
<content-media type="InteractiveGraphicHotspots" id="cm7525379986">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405040000/en1405040500/en1405040501/cm7525379986.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405040000/en1405040500/en1405040501/cm7525379986text.xml"/></content-media>
<content-text><p>Using the <span class="cmd"><b>show</b></span> commands described earlier reveals most of the more common ACL errors before they cause problems in your network. Hopefully, you are using a good test procedure to protect your network for errors during the development stage of your ACL implementation.</p> <p>When you look at an ACL, check it against the rules you learned regarding how to build ACLs correctly. Most errors occur because these basic rules are ignored. In fact, the most common errors are entering ACL statements in the wrong order and not applying adequate criteria to your rules. </p> <p>Let us look at a series of common problems and the solutions. Click each example as you read these explanations.</p> <p><b>Click the Error 1 button in the figure.</b></p> <p>Host 192.168.10.10 has no connectivity with 192.168.30.12. Can you see the error in the output of the <span class="cmd"><b>show access-lists</b></span> command? </p> <p><b>Solution</b> - Look at the order of the ACL statements. Host 192.168.10.10 has no connectivity with 192.168.30.12 because of the order of rule 10 in the access list. Because the router processes ACLs from the top down, statement 10 denies host 192.168.10.10, so statement 20 does not get processed. Statements 10 and 20 should be reversed. The last line allows all other non-TCP traffic that falls under IP (ICMP, UDP, and so on).</p> <p><b>Click the Error 2 button in the figure.</b></p> <p>The 192.168.10.0 /24 network cannot use TFTP to connect to the 192.168.30.0 /24 network. Can you see the error in the output of the <span class="cmd"><b>show access-lists</b></span> command?</p> <p><b>Solution</b> - The 192.168.10.0 /24 network cannot use TFTP to connect to the 192.168.30.0 /24 network because TFTP uses the transport protocol UDP. Statement 30 in access list 120 allows all other TCP traffic. Because TFTP uses UDP, it is implicitly denied. Statement 30 should be <span class="cmd"><b>ip any any</b></span>.</p> <p>This ACL works whether it is applied to Fa0/0 of R1 or S0/0/1of R3, or S0/0/0 or R2 in the incoming direction. However, based on the rule about placing extended ACLs closest to the source, the best option is on Fa0/0 of R1 because it allows undesirable traffic to be filtered without crossing the network infrastructure.</p> <p><b>Click the Error 3 button in the figure.</b></p> <p>The 192.168.10.0 /24 network can use Telnet to connect to 192.168.30.0 /24, but this connection should not be allowed. Analyze the output from the <span class="cmd"><b>show access-lists</b></span> command and see whether you can find a solution. Where would you apply this ACL?</p> <p><b>Solution</b> - The 192.168.10.0 /24 network can use Telnet to connect to the 192.168.30.0 /24 network, because the Telnet port number in statement 10 of access list 130 is listed in the wrong position. Statement 10 currently denies any source with a port number that is equal to Telnet trying to establish a connection to any IP address. If you want to deny Telnet traffic inbound on S0, you should deny the destination port number that is equal to Telnet, for example, <span class="cmd"><b>deny tcp any any eq telnet</b></span>.</p> <p><b>Click the Error 4 button in the figure.</b></p> <p>Host 192.168.10.10 can use Telnet to connect to 192.168.30.12, but this connection should not be allowed. Analyze the output from the <span class="cmd"><b>show access-lists</b></span> command. </p> <p><b>Solution</b> - Host 192.168.10.10 can use Telnet to connect to 192.168.30.12 because there are no rules that deny host 192.168.10.10 or its network as the source. Statement 10 of access list 140 denies the router interface from which traffic would be departing. However, as these packets depart the router, they have a source address of 192.168.10.10 and not the address of the router interface.</p> <p>As in the solution for Error 2, this ACL should be applied to Fa0/0 of R1 in the incoming direction.</p> <p><b>Click the Error 5 button in the figure.</b></p> <p>Host 192.168.30.12 can use Telnet to connect to 192.168.10.10, but this connection should not be allowed. Look at the output from the <span class="cmd"><b>show access-lists</b></span> command and find the error.</p> <p><b>Solution</b> - Host 192.168.30.12 can use Telnet to connect to 192.168.10.10 because of the direction in which access list 150 is applied to the S0/0 interface. Statement 10 denies the source address of 192.168.30.12, but that address would only be the source if the traffic were outbound on S0/0, not inbound. </p></content-text>
</page>
<page type="FullScreen" id="en1405040502">
<content-media type="ActivityCustom" id="cm9784865559">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405040000/en1405040500/en1405040502/cm9784865559.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405040000/en1405040500/en1405040502/cm9784865559text.xml"/></content-media>
<content-text><p>Complex Flash Activity: Configure Complex ACLs</p></content-text>
</page>
</topic>
</section>
<section type="" id="en1405050000">
<title><content-text>Chapter Labs</content-text></title>
<topic type="" id="en1405050100">
<title><content-text>Basic Access Control Lists</content-text></title>
<page type="OneColumn" id="en1405050101">
<content-media type="ActivityLab" id="cm8857404340">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405050000/en1405050100/en1405050101/cm8857404340/" mime="application/pdf" scale="true" type="directory" width="0" height="0" external="en1405000000/en1405050000/en1405050100/en1405050101/cm8857404340/icontext.xml"/></content-media>
<content-text><p>An essential part of network security is being able to control what kind of traffic is being permitted to reach your network, and where that traffic is coming from. This lab will teach how to configure basic and extended access control lists to accomplish this goal.</p></content-text>
</page>
<page type="OneColumn" id="en1405050102">
<content-media type="ActivityPKA" id="cm8611793361">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405050000/en1405050100/en1405050102/cm8611793361/" mime="application/packettracer" scale="true" type="directory" width="0" height="0" external="en1405000000/en1405050000/en1405050100/en1405050102/cm8611793361/icontext.xml"/></content-media>
<content-text><p>This activity is a variation of Lab 5.5.1. Packet Tracer may not support all the tasks specified in the hands-on lab. This activity should not be considered equivalent to completing the hands-on lab. Packet Tracer is not a substitute for a hands-on lab experience with real equipment.</p> <p>Detailed instructions are provided within the activity as well as in the PDF link below.</p> <p><content-link target="E4_PTAct_5_5_1.pdf" type="internalfile">Activity Instructions (PDF)</content-link></p> <p><b>Click the Packet Tracer icon for more details.</b></p></content-text>
</page>
</topic>
<topic type="" id="en1405050200">
<title><content-text>Access Control Lists Challenge</content-text></title>
<page type="OneColumn" id="en1405050201">
<content-media type="ActivityLab" id="cm2075601179">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405050000/en1405050200/en1405050201/cm2075601179/" mime="application/pdf" scale="true" type="directory" width="0" height="0" external="en1405000000/en1405050000/en1405050200/en1405050201/cm2075601179/icontext.xml"/></content-media>
<content-text><p>In the Basic Access Control List lab you configured for the first time basic and extended access control lists as a network security measure. In this lab try to set up as much network security as possible without referring back to the Basic lab. This will allow you to gauge how much you learned in the Basic lab. Where necessary check your work using either the Basic lab or the answer key provided by your instructor. </p></content-text>
</page>
<page type="OneColumn" id="en1405050202">
<content-media type="ActivityPKA" id="cm9758146967">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405050000/en1405050200/en1405050202/cm9758146967/" mime="application/packettracer" scale="true" type="directory" width="0" height="0" external="en1405000000/en1405050000/en1405050200/en1405050202/cm9758146967/icontext.xml"/></content-media>
<content-text><p>This activity is a variation of Lab 5.5.2. Packet Tracer may not support all the tasks specified in the hands-on lab. This activity should not be considered equivalent to completing the hands-on lab. Packet Tracer is not a substitute for a hands-on lab experience with real equipment.</p> <p>Detailed instructions are provided within the activity as well as in the PDF link below.</p> <p><content-link target="E4_PTAct_5_5_2.pdf" type="internalfile">Activity Instructions (PDF)</content-link></p> <p><b>Click the Packet Tracer icon for more details.</b></p></content-text>
</page>
</topic>
<topic type="" id="en1405050300">
<title><content-text>Troubleshooting Access Control Lists</content-text></title>
<page type="OneColumn" id="en1405050301">
<content-media type="ActivityLab" id="cm7960973984">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405050000/en1405050300/en1405050301/cm7960973984/" mime="application/pdf" scale="true" type="directory" width="0" height="0" external="en1405000000/en1405050000/en1405050300/en1405050301/cm7960973984/icontext.xml"/></content-media>
<content-text><p>You work for a regional service provider that has recently experienced several security breaches. Your department has been asked to secure customer edge routers so that only the local management PCs are able to access VTY lines. To address this issue, you will configure ACLs on R2 so that networks directly connected to R3 cannot communicate to networks directly connected to R1, but still allow all other traffic. </p></content-text>
</page>
</topic>
</section>
<section type="ChapterSummary" id="en1405060000">
<title><content-text>Chapter Summary</content-text></title>
<topic type="" id="en1405060100">
<title><content-text>Summary</content-text></title>
<page type="OneColumn" id="en1405060101">
<content-media type="ChapterSummary" id="cm5738420936">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405060000/en1405060100/en1405060101/cm5738420936.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405060000/en1405060100/en1405060101/cm5738420936text.xml"/></content-media>
<content-text><p>An ACL is a router configuration script that uses packet filtering to control whether a router permits or denies packets to pass based on criteria found in the packet header. ACLs are also used for selecting types of traffic to be analyzed, forwarded, or processed in other ways. ACLs are among the most commonly used objects in Cisco IOS software.</p> <p>There are different types of ACLs - standard, extended, named and numbered. In this chapter you learned the purpose of each of these ACL types and where they need to be placed in your network. You learned to configure ACLs on inbound and outbound interfaces. Special ACL types, dynamic, reflexive, and timed ACLs, were described. Guidelines and best practices for developing functional and effective ACLs were highlighted.</p> <p>With the knowledge and skills you learned in this chapter you can now confidently, but with care, configure standard, extended, and complex ACLs, and verify and troubleshoot those configurations. </p></content-text>
</page>
<page type="FullScreen" id="en1405060102">
<content-media type="StaticGraphic" id="cm1434218992">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405060000/en1405060100/en1405060102/cm1434218992.swf" mime="shockwave/flash" scale="true" type="file" width="400" height="200" external="en1405000000/en1405060000/en1405060100/en1405060102/cm1434218992text.xml"/></content-media>
<content-text></content-text>
</page>
<page type="OneColumn" id="en1405060103">
<content-media type="ActivityPKA" id="cm8686006627">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405060000/en1405060100/en1405060103/cm8686006627/" mime="application/packettracer" scale="true" type="directory" width="0" height="0" external="en1405000000/en1405060000/en1405060100/en1405060103/cm8686006627/icontext.xml"/></content-media>
<content-text><p>In this activity, you will demonstrate your ability to configure ACLs that enforce five security policies. In addition, you will configure PPP and OSPF routing. The devices are already configured with IP addressing.</p> <p>Detailed instructions are provided within the activity as well as in the PDF link below.</p> <p><content-link target="E4_PTAct_5_6_1.pdf" type="internalfile">Activity Instructions (PDF)</content-link></p> <p><b>Click the Packet Tracer icon for more details.</b></p></content-text>
</page>
</topic>
</section>
<section type="ChapterQuiz" id="en1405070000">
<title><content-text>Chapter Quiz</content-text></title>
<topic type="" id="en1405070100">
<title><content-text>Chapter Quiz</content-text></title>
<page type="FullScreen" id="en1405070101">
<content-media type="ChapterQuiz" id="cm9380024428">	<title><content-text></content-text></title>	<media ref="en1405000000/en1405070000/en1405070100/en1405070101/cm9380024428/" mime="" scale="true" type="directory" width="100%" height="100%" external="en1405000000/en1405070000/en1405070100/en1405070101/cm9380024428/icontext.xml"/></content-media>
<content-text></content-text>
</page>
</topic>
</section>
</chapter>
